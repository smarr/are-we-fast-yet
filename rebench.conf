# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'benchmark.data'

.are_we_fast_yet:
    ## this is ignored by rebench
    iteration_numbers:
        fast_vm:      &FAST_VM      3000
        slow_vm:      &SLOW_VM      250
        very_slow_vm: &VERY_SLOW_VM 100

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_invocation_time: 5000
        variable_values: [*FAST_VM] ## the number iterations measured
        location: benchmarks/SOM
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
            - Richards:
                extra_args: 100
            - Json:
                extra_args: 100
            - CD:
                extra_args: 250
            - Havlak:
                extra_args: 1500

            - Bounce:
                extra_args: 1500
            - List:
                extra_args: 1500
            - Mandelbrot:
                extra_args: 500
            - NBody:
                extra_args: 250000
            - Permute:
                extra_args: 1000
            - Queens:
                extra_args: 1000
            - Sieve:
                extra_args: 3000
            - Storage:
                extra_args: 1000
            - Towers:
                extra_args: 600

    steady-som-interp:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_invocation_time: 5000
        variable_values: [*VERY_SLOW_VM] ## the number iterations measured
        location: benchmarks/SOM
        benchmarks: *BENCHMARKS

    steady-somns:
        gauge_adapter: RebenchLog
        command: " Harness.ns %(benchmark)s %(variable)s "
        location: benchmarks/SOMns
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    steady-ruby:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    steady-crystal:
        gauge_adapter: RebenchLog
        location: benchmarks/Crystal
        command: "./harness %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    ruby-interp:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: [*VERY_SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    ruby-indy:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    steady-js:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    pharo:
        gauge_adapter: RebenchLog
        location: benchmarks/Smalltalk
        command: "AWFY_Pharo.image run.st %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    squeak:
        gauge_adapter: RebenchLog
        location: benchmarks/Smalltalk
        command: "AWFY_Squeak64.image run.st %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

# VMs have a name and are specified by a path and the binary to be executed
executors:
    Java:
        executable: java

    TruffleSOM:
        path: TruffleSOM
        executable: som

    SOM:
        path: SOM
        executable: som.sh
    SOMpp:
        path: SOMpp
        executable: som.sh
        args: " -H512MB "
        build: [make]
    SOMppOMR:
        path: SOMppOMR
        executable: som.sh
        args: " -H512MB "
    SOMns:
        path: SOMns
        executable: fast

    Ruby:
        executable: ruby

    Crystal:
        path: benchmarks/Crystal
        executable: harness
        build: [./build.sh]

    Node:
        executable: node

    Pharo:
      path: /home/runner/.asdf/installs/awfy/pharo-120
      executable: pharo
    Squeak:
      path: /home/runner/.asdf/installs/awfy/squeak-6.0-22148/bin
      executable: squeak
      args: -headless

experiments:
    steady-java:
        description: Measure steady state performance
        suites: [steady-java]
        executions: [Java]
    steady-som:
        executions:
            - SOMns:
                suites: [steady-somns]
            - TruffleSOM:
                suites: [steady-som]
            - SOM:
                suites: [steady-som-interp]
            - SOMpp:
                suites: [steady-som-interp]
            - SOMppOMR:
                suites: [steady-som-interp]
    steady-ruby:
        suites: [steady-ruby]
        executions: []
    steady-crystal:
        suites: [steady-crystal]
        executions: [Crystal]
    steady-js:
        suites: [steady-js]
        executions:
            - Node
    ruby-others:
        executions:
            - Ruby:
                suites: [ruby-interp]
    smalltalk:
        executions:
          - Pharo:
              suites: [pharo]
          - Squeak:
              suites: [squeak]

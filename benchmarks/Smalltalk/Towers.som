"
Copyright (c) 2001-2016 see AUTHORS.md file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Mmm... Hanoi...
"
Towers = Benchmark (

  | piles movesdone |
  
  initialize = (
    piles     := nil.
    movesdone := 0.
  )
  
  pushDisk: disk onPile: pile = (
    | top |
    
    top := piles at: pile.
    (top notNil and: [ disk size >= top size ])
      ifTrue: [ self error: 'Cannot put a big disk on a smaller one' ].
    
    disk next: top.
    piles at: pile put: disk.
  )
  
  popDiskFrom: pile = (
    | top |
    
    top := piles at: pile.
    top ifNil: [
        self error: 'Attempting to remove a disk from an empty pile' ].
    
    piles at: pile put: top next.
    top next: nil.
    ^ top
  )
  
  moveTopDiskFrom: fromPile to: toPile = (
    self pushDisk: (self popDiskFrom: fromPile) onPile: toPile.
    movesdone := movesdone + 1.
  )
  
  buildTowerAt: pile disks: disks = (
    disks to: 0 by: -1 do: [ :i |
      self pushDisk: (TowersDisk new: i) onPile: pile ]
  )
  
  move: disks disksFrom: fromPile to: toPile = (
    disks = 1
      ifTrue: [ self moveTopDiskFrom: fromPile to: toPile ]
      ifFalse: [ | otherPile |
        otherPile := 6 - fromPile - toPile.
        self move: disks - 1 disksFrom: fromPile to: otherPile.
        self moveTopDiskFrom: fromPile to: toPile.
        self move: disks - 1 disksFrom: otherPile to: toPile. ]
  )
  
  benchmark = (
    piles := Array new: 3.
    self buildTowerAt: 1 disks: 13.
    movesdone := 0.
    self move: 13 disksFrom: 1 to: 2.
    ^ movesdone
  )
  
  verifyResult: result = (
    ^ 8191 = result
  )
  
  ----
  
  new = ( ^ super new initialize )
)

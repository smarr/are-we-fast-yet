"This benchmark is derived from Mario Wolczko's Smalltalk version of DeltaBlue.

It is modified to use the SOM class library.
License details:

http://web.archive.org/web/20050825101121/http://www.sunlabs.com/people/mario/java_benchmarking/index.html
"
Planner = (
  "This benchmark is an implementation of the DeltaBlue Constraint Solver
   described in `The DeltaBlue Algorithm: An Incremental Constraint
   Hierarchy Solver'', by Bjorn N. Freeman-Benson and John Maloney,
   Communications of the ACM, January 1990 (also as University of
   Washington TR 89-08-06).

   To run the benchmark, execute the expression `Planner standardBenchmark`."
  | currentMark |

  initialize = (
    currentMark := 1
  )

  "add/remove"

  incrementalAdd: c = (
    "Attempt to satisfy the given constraint and, if successful,
     incrementally update the dataflow graph.

     Details: If satifying the constraint is successful, it may override a
     weaker constraint on its output. The algorithm attempts to resatisfy
     that constraint using some other method. This process is repeated
     until either a) it reaches a variable that was not previously
     determined by any constraint or b) it reaches a constraint that
     is too weak to be satisfied using any of its methods. The variables
     of constraints that have been processed are marked with a unique mark
     value so that we know where we've been. This allows the algorithm to
     avoid getting into an infinite loop even if the constraint graph has
     an inadvertent cycle."

    | mark overridden |
    mark := self newMark.
    overridden := c satisfy: mark propagate: self.
    [overridden == nil] whileFalse:
        [overridden := overridden satisfy: mark propagate: self]
  )

  incrementalRemove: c = (
    "Entry point for retracting a constraint. Remove the given constraint,
     which should be satisfied, and incrementally update the dataflow
     graph.

     Details: Retracting the given constraint may allow some currently
     unsatisfiable downstream constraint be satisfied. We thus collect a
     list of unsatisfied downstream constraints and attempt to satisfy
     each one in turn. This list is sorted by constraint strength,
     strongest first, as a heuristic for avoiding unnecessarily adding
     and then overriding weak constraints."

    | out unsatisfied |
    out := c output.
    c markUnsatisfied.
    c removeFromGraph.
    unsatisfied := self removePropagateFrom: out.
    unsatisfied forEach: [: u | self incrementalAdd: u]
  )

  "planning/value propagation"
  extractPlanFromConstraints: constraints = (
    "Extract a plan for resatisfaction starting from the outputs of the
     given constraints, usually a set of input constraints."

    | sources |
    sources := Vector new.
    constraints forEach: [: c |
      (c isInput and: [c isSatisfied]) ifTrue: [sources append: c]].
    ^ self makePlan: sources
  )

  makePlan: sources = (
    "Extract a plan for resatisfaction starting from the given satisfied
     source constraints, usually a set of input constraints. This method
     assumes that stay optimization is desired; the plan will contain only
     constraints whose output variables are not stay. Constraints that do
     no computation, such as stay and edit constraints, are not included
     in the plan.

     Details: The outputs of a constraint are marked when it is added to
     the plan under construction. A constraint may be appended to the plan
     when all its input variables are known. A variable is known if either
     a) the variable is marked (indicating that has been computed by a
     constraint appearing earlier in the plan), b) the variable is 'stay'
     (i.e. it is a constant at plan execution time), or c) the variable
     is not determined by any constraint. The last provision is for past
     states of history variables, which are not stay but which are also
     not computed by any constraint."

    | mark plan todo c |
    mark := self newMark.
    plan := Plan new.
    todo := sources.
    [todo isEmpty] whileFalse:
        [c := todo removeFirst.
         ((c output mark ~= mark) and:      "not in plan already and..."
          [c inputsKnown: mark]) ifTrue:    "eligible for inclusion"
            [plan append: c.
             c output mark: mark.
             self addConstraintsConsuming: c output to: todo]].
    ^ plan
  )

  propagateFrom: v = (
    "The given variable has changed. Propagate new values downstream."
    | todo c |
    todo := Vector new.
    self addConstraintsConsuming: v to: todo.
    [todo isEmpty] whileFalse:
      [c := todo removeFirst.
       c execute.
       self addConstraintsConsuming: c output to: todo].
  )

  "private"
  addConstraintsConsuming: v to: aCollection = (
    | determiningC |
    determiningC := v determinedBy.
    v constraints forEach: [: c |
      ((c == determiningC) or: [c isSatisfied not]) ifFalse:
        [aCollection append: c]].
  )

  addPropagate: c mark: mark = (
    "Recompute the walkabout strengths and stay flags of all variables
     downstream of the given constraint and recompute the actual values
     of all variables whose stay flag is true. If a cycle is detected,
     remove the given constraint and answer false. Otherwise, answer true.

     Details: Cycles are detected when a marked variable is encountered
     downstream of the given constraint. The sender is assumed to have
     marked the inputs of the given constraint with the given mark. Thus,
     encountering a marked node downstream of the output constraint means
     that there is a path from the constraint's output to one of its
     inputs."

    | todo d |
    todo := Vector with: c.
    [todo isEmpty] whileFalse:
      [d := todo removeFirst.
       (d output mark = mark) ifTrue:
        [self incrementalRemove: c.
         ^ false].
       d recalculate.
       self addConstraintsConsuming: d output to: todo].
    ^ true
  )

  changeVar: aDBVariable newValue: newValue = (
    | editConstraint plan |
    editConstraint := EditConstraint var: aDBVariable strength: Strength SymPreferred addTo: self.
    plan := self extractPlanFromConstraints: (Vector with: editConstraint).
    10 timesRepeat: [
      aDBVariable value: newValue.
      plan execute ].
    editConstraint destroyConstraint: self.
  )

  constraintsConsuming: v do: aBlock = (
    | determiningC |
    determiningC := v determinedBy.
    v constraints forEach: [: c |
     (c == determiningC or: [c isSatisfied not]) ifFalse:
      [aBlock value: c]].
  )

  newMark = (
    "Select a previously unused mark value.

     Details: We just keep incrementing. If necessary, the counter will
     turn into a LargePositiveInteger. In that case, it will be a bit
     slower to compute the next mark but the algorithms will all behave
     correctly. We reserve the value '0' to mean 'unmarked'. Thus, this
     generator starts at '1' and will never produce '0' as a mark value."

    ^ currentMark := currentMark + 1
  )

  removePropagateFrom: out = (
    "Update the walkabout strengths and stay flags of all variables
     downstream of the given constraint. Answer a collection of unsatisfied
     constraints sorted in order of decreasing strength."

    | unsatisfied todo v |
    unsatisfied := Vector new.

    out determinedBy: nil.
    out walkStrength: Strength absoluteWeakest.
    out stay: true.
    todo := Vector with: out.
    [todo isEmpty] whileFalse: [
      v := todo removeFirst.
       v constraints forEach: [:c |
         c isSatisfied ifFalse: [unsatisfied append: c]].
       self constraintsConsuming: v do: [:c |
         c recalculate.
         todo append: c output]].

    unsatisfied sort: [:c1 :c2 | c1 strength stronger: c2 strength].
    ^ unsatisfied
  )

  ----

  "instance creation"
  new = (
    ^ super new initialize
  )

  "benchmarks"
  chainTest: n = (
      "Do chain-of-equality-constraints performance tests."
      | vars editConstraint plan planner |

      planner := Planner new.
      vars := Array new: n+1.
      1 to: n+1 do: [:i |
        vars at: i put: DBVariable new ].

      "thread a chain of equality constraints through the variables"
      1 to: n do: [ :i |
        | v1 v2 |
        v1 := vars at: i.
        v2 := vars at: i + 1.
        EqualityConstraint var: v1 var: v2 strength: Strength SymRequired addTo: planner].

      StayConstraint var: vars last strength: Strength SymStrongDefault addTo: planner.
      editConstraint := EditConstraint var: vars first strength: Strength SymPreferred addTo: planner.
      plan := planner extractPlanFromConstraints: (Vector with: editConstraint).

      1 to: 100 do: [ :v |
        vars first value: v.
        plan execute.
        vars last value ~= v ifTrue: [self error: 'Chain test failed!!']].

      editConstraint destroyConstraint: planner
  )

  projectionTest: n = (
      "This test constructs a two sets of variables related to each other by
       a simple linear transformation (scale and offset)."

      | scale offset src dst planner dests |
      planner := Planner new.
      dests   := Vector new.
      scale   := DBVariable value: 10.
      offset  := DBVariable value: 1000.

      1 to: n do: [ :i |
        src := DBVariable value: i.
        dst := DBVariable value: i.
        dests append: dst.
        StayConstraint  var: src strength: Strength SymDefault addTo: planner.
        ScaleConstraint var: src var: scale var: offset var: dst strength: Strength SymRequired addTo: planner
      ].

      planner changeVar: src newValue: 17.
      dst value ~= 1170 ifTrue: [self error: 'Projection test 1 failed!!'].

      planner changeVar: dst newValue: 1050.
      src value ~= 5 ifTrue: [self error: 'Projection test 2 failed!!'].

      planner changeVar: scale newValue: 5.
      1 to: n - 1 do: [ :i |
          (dests at: i) value ~= (i*5 + 1000)
              ifTrue: [self error: 'Projection test 3 failed!!']].

      planner changeVar: offset newValue: 2000.
      1 to: n - 1 do: [ :i |
          (dests at: i) value ~= (i*5 + 2000)
              ifTrue: [self error: 'Projection test 4 failed!!']]
  )
)

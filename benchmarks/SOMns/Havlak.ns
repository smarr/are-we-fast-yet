(*
Copyright 2011 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. *)
class Havlak usingPlatform: platform andHarness: harness = (
| private Benchmark  = harness Benchmark.
  private Core       = (platform system loadModule: 'Core.ns' nextTo: self) with: platform kernel.
  private Vector     = Core Vector.
  private Dictionary = Core Dictionary.
  private IdentityDictionary = Core IdentityDictionary.
  private IdentitySet = Core IdentitySet.
  private Set        = Core Set.
  private Array      = platform kernel Array.
|
)(
  private class HavlakBenchmark = Benchmark ()(
    public innerBenchmarkLoop: innerIterations = (
      ^ verifyResult:
         (LoopTesterApp new main: innerIterations loop: 50 p: 10 p: 10 p: 5)
        iterations: innerIterations
    )

    private verifyResult: result iterations: innerIterations = (
      innerIterations = 15000 ifTrue: [ ^ (result at: 1) = 46602 and: [(result at: 2) = 5213] ].
      innerIterations =  1500 ifTrue: [ ^ (result at: 1) =  6102 and: [(result at: 2) = 5213] ].
      innerIterations =   150 ifTrue: [ ^ (result at: 1) =  2052 and: [(result at: 2) = 5213] ].
      innerIterations =    15 ifTrue: [ ^ (result at: 1) =  1647 and: [(result at: 2) = 5213] ].
      innerIterations =     1 ifTrue: [ ^ (result at: 1) =  1605 and: [(result at: 2) = 5213] ].

      ('No verification result for' + innerIterations + ' found') println.
      ('Result is ' + (result at: 1) + ', ' + (result at: 2)) println.
      ^ false
    )
  )

  private class BasicBlock new: name = (
  | public inEdges  = Vector new: 2.
    public outEdges = Vector new: 2.
    private name = name.
  |
  )(
    public numPred = ( ^ inEdges size )

    public addOutEdge: to = (
      outEdges append: to
    )

    public addInEdge: from = (
      inEdges append: from
    )

    public customHash = (
      ^ name
    )
  )

  private class BasicBlockEdge for: cfg from: fromName to: toName = (
  | private from = cfg createNode: fromName.
    private to   = cfg createNode: toName.
  |
    from addOutEdge: to.
    to   addInEdge:  from.
    cfg  addEdge:    self
  )()

  private class ControlFlowGraph = (
  | private basicBlockMap = Vector new.
    private startNode ::= nil.
    private edgeList = Vector new.
  |)(
    public createNode: name = (
      | node |

      (basicBlockMap at: name)
        ifNotNil: [ node:: basicBlockMap at: name ]
        ifNil: [
          node:: BasicBlock new: name.
          basicBlockMap at: name put: node ].

      numNodes = 1 ifTrue: [startNode:: node].
      ^ node
    )

    public addEdge: edge = (
      edgeList append: edge
    )

    public numNodes = (
      ^ basicBlockMap size
    )

    public startBasicBlock = (
      ^ startNode
    )

    public basicBlocks = (
      ^ basicBlockMap
    )
  )

  private class LoopStructureGraph = (
  | private root  = SimpleLoop basicBlock: nil reducible: false.
    private loops = Vector new.
    private loopCounter ::= 0.
  |
    root nestingLevel: 0.
    root counter: loopCounter.
    loopCounter:: loopCounter + 1.
    loops append: root
  )(
    public createNewLoop: bb reducible: isReducible = (
      | loop |
      loop:: SimpleLoop basicBlock: bb reducible: isReducible.
      loop counter: loopCounter.
      loopCounter:: loopCounter + 1.
      loops append: loop.
      ^ loop
    )

    public calculateNestingLevel = (
      loops forEach: [:liter |
        liter isRoot ifFalse: [
          liter parent ifNil: [
            liter parent: root ] ] ].

      calculateNestingLevelRec: root depth: 0
    )

    private calculateNestingLevelRec: loop depth: depth = (
      loop depthLevel: depth.
      loop children forEach: [:liter |
        calculateNestingLevelRec: liter depth: depth + 1.
        loop nestingLevel: (loop nestingLevel max: 1 + liter nestingLevel) ]
    )

    public numLoops = (
      ^ loops size
    )
  )

  private class SimpleLoop basicBlock: bb reducible: isReducible = (
  | public counter    ::= 0.
    public depthLevel ::= 0.

    private parent_ ::= nil.
    private isRoot_ ::= false.
    private nestingLevel_ ::= 0.
    private header = bb.
    private isReducible = isReducible.
    private basicBlocks = IdentitySet new.
    public  children    = IdentitySet new.
  |
    bb ifNotNil: [ basicBlocks add: bb ]
  )(
    public addNode: bb = (
      basicBlocks add: bb
    )

    public addChildLoop: loop = (
      children add: loop
    )

    public parent = ( ^ parent_ )
    public parent: val = (
      parent_:: val.
      parent_ addChildLoop: self
    )

    public isRoot    = ( ^ isRoot_ )
    public setIsRoot = ( isRoot_:: true )

    public nestingLevel = ( ^ nestingLevel_ )
    public nestingLevel: level = (
      nestingLevel_:: level.
      level = 0 ifTrue: [ setIsRoot ]
    )
  )

  private class UnionFindNode = (
  | private parent_ ::= nil.
    private bb_     ::= nil.
    private dfsNumber_ ::= 0.
    public loop ::= nil.
  |)(
    public initNode: bb dfs: dfsNumber = (
      parent_:: self.
      bb_:: bb.
      dfsNumber_:: dfsNumber.
      loop:: nil.
    )

    public findSet = (
      | nodeList node |
      nodeList:: Vector new.

      node:: self.

      [node ~= node parent] whileTrue: [
        ((node parent) ~= (node parent parent)) ifTrue: [
          nodeList append: node ].
        node:: node parent ].

      nodeList forEach: [:iter | iter union: parent_ ].
      ^ node
    )

    public union: basicBlock = (
      parent_:: basicBlock
    )

    public parent    = ( ^ parent_ )
    public bb        = ( ^ bb_ )
    public dfsNumber = ( ^ dfsNumber_ )
  )

  private class LoopTesterApp = (
  | private cfg = ControlFlowGraph new.
    private lsg = LoopStructureGraph new.
  |
    cfg createNode: 1.
  )(
    private buildDiamond: start = (
      | bb0 |
      bb0:: start.
      BasicBlockEdge for: cfg from: bb0 to: bb0 + 1.
      BasicBlockEdge for: cfg from: bb0 to: bb0 + 2.
      BasicBlockEdge for: cfg from: bb0 + 1 to: bb0 + 3.
      BasicBlockEdge for: cfg from: bb0 + 2 to: bb0 + 3.
      ^ bb0 + 3
    )

    private buildConnect: start end: end = (
      BasicBlockEdge for: cfg from: start to: end
    )

    private buildStraight: start n: n = (
      0 to: n - 1 do: [:i |
        buildConnect: start + i end: start + i + 1 ].
      ^ start + n
    )

    private buildBaseLoop: from = (
      | header diamond1 d11 diamond2 footer |
      header::   buildStraight: from n: 1.
      diamond1:: buildDiamond: header.
      d11::      buildStraight: diamond1 n: 1.
      diamond2:: buildDiamond: d11.
      footer::   buildStraight: diamond2 n: 1.

      buildConnect: diamond2 end: d11.
      buildConnect: diamond1 end: header.
      buildConnect: footer   end: from.
      footer:: buildStraight: footer n: 1.
      ^ footer
    )

    public main: numDummyLoops loop: findLoopIterations p: parLoop p: pparLoops p: ppparLoops = (
      constructSimpleCFG.
      addDummyLoops: numDummyLoops.
      constructCFG: parLoop p: pparLoops p: ppparLoops.

      findLoops: lsg.
      findLoopIterations timesRepeat: [
        findLoops: LoopStructureGraph new ].

      lsg calculateNestingLevel.
      ^ Array with: lsg numLoops with: cfg numNodes
    )

    private constructCFG: parLoops p: pparLoops p: ppparLoops = (
      | n |
      n:: 3.

      parLoops timesRepeat: [
        cfg createNode: n + 1.
        buildConnect: 2 end: n + 1.
        n:: n + 1.

        pparLoops timesRepeat: [
          | top bottom |
          top:: n.
          n:: buildStraight: n n:1.
          ppparLoops timesRepeat: [ n:: buildBaseLoop: n ].
          bottom:: buildStraight: n n: 1.
          buildConnect: n end: top.
          n:: bottom ].

        buildConnect: n end: 1 ]
    )

    private addDummyLoops: numDummyLoops = (
      numDummyLoops timesRepeat: [
        findLoops: lsg ]
    )

    private findLoops: loopStructure = (
      | finder |
      finder:: HavlakLoopFinder new: cfg lsg: loopStructure.
      finder findLoops
    )

    private constructSimpleCFG = (
      cfg createNode: 1.
      buildBaseLoop: 1.
      cfg createNode: 2.
      BasicBlockEdge for: cfg from: 1 to:  3
    )
  )

  private class HavlakLoopFinder new: cfg lsg: lsg = (
  | private cfg = cfg.
    private lsg = lsg.
    private Unvisited = 2147483647.
    private MaxNonBackPreds = 32 * 1024.
    private nonBackPreds = Vector new.
    private backPreds    = Vector new.
    private number = IdentityDictionary new.

    private maxSize ::= 0.
    private header  ::= nil.
    private type    ::= nil.
    private last    ::= nil.
    private nodes   ::= nil.
  |)(
    (* BasicBlockClass enum #BBTop #BBNonHeader #BBReducible #BBSelf
                            #BBIrreducible #BBDead #BBLast *)

    private isAncestor: w v: v = (
      ^ (w <= v) && (v <= (last at: w))
    )

    private doDFS: currentNode current: current = (
      | lastId outerBlocks |

      (nodes at: current) initNode: currentNode dfs: current.
      number at: currentNode put: current.

      lastId:: current.
      outerBlocks:: currentNode outEdges.

      1 to: outerBlocks size do: [:i |
        | target |
        target:: outerBlocks at: i.
        (number at: target) = Unvisited ifTrue: [
          lastId:: doDFS: target current: lastId + 1 ] ].

      last at: current put: lastId.
      ^ lastId
    )

    private initAllNodes = (
      cfg basicBlocks forEach: [:bb |
        number at: bb put: Unvisited ].

      doDFS: cfg startBasicBlock current: 1
    )

    private identifyEdges: size = (
      1 to: size do: [:w |
        | nodeW |
        header at: w put: 1.
        type   at: w put: #BBNonHeader.

        nodeW:: (nodes at: w) bb.
        nodeW
          ifNil:    [ type at: w put: #BBDead ]
          ifNotNil: [ processEdges: nodeW w: w ] ]
    )

    private processEdges: nodeW w: w = (
      nodeW numPred > 0 ifTrue: [
        nodeW inEdges forEach: [:nodeV |
          | v |
          v:: number at: nodeV.
          v <> Unvisited ifTrue: [
            (isAncestor: w v: v)
              ifTrue:  [ (backPreds at: w) append: v ]
              ifFalse: [ (nonBackPreds at: w) add: v ] ] ] ]
    )

    public findLoops = (
      | size |
      cfg startBasicBlock ifNil: [ ^ self ].

      size:: cfg numNodes.

      nonBackPreds removeAll.
      backPreds removeAll.
      number removeAll.

      size > maxSize ifTrue: [
        header:: Array new: size.
        type::   Array new: size.
        last::   Array new: size.
        nodes::  Array new: size.
        maxSize:: size ].

      1 to: size do: [:i |
        nonBackPreds append: Set new.
        backPreds append: Vector new.
        nodes at: i put: UnionFindNode new ].

      initAllNodes.
      identifyEdges: size.
      header at: 1 put: 1.

      size downTo: 1 do: [:w |
        | nodePool nodeW |
        nodePool:: Vector new.
        nodeW:: (nodes at: w) bb.

        nodeW ifNotNil: [
          | workList |
          stepD: w nodePool: nodePool.

          workList:: Vector new.
          nodePool forEach: [:niter | workList append: niter ].

          nodePool size <> 0 ifTrue: [
            type at: w put: #BBReducible.
          ].

          [ workList isEmpty ] whileFalse: [
            | x nonBackSize |
            x:: workList removeFirst.

            nonBackSize:: (nonBackPreds at: x dfsNumber) size.
            nonBackSize > MaxNonBackPreds ifTrue: [ ^ self ].
            stepEProcessNonBackPreds: w nodePool: nodePool workList: workList x: x ].

          (nodePool size > 0 or: [(type at: w) = #BBSelf]) ifTrue: [
            | loop |
            loop:: lsg createNewLoop: nodeW reducible: ((type at: w) <> #BBIrreducible).
            setLoopAttribute: w nodePool: nodePool loop: loop ] ] ]
    )

    private stepEProcessNonBackPreds: w nodePool: nodePool workList: workList x: x = (
      (nonBackPreds at: x dfsNumber) forEach: [:iter |
        | y ydash |
        y:: nodes at: iter.
        ydash:: y findSet.

        (isAncestor: w v: ydash dfsNumber) not
          ifTrue: [
            type at: w put: #BBIrreducible.
            (nonBackPreds at: w) add: ydash dfsNumber ]
          ifFalse: [
            ydash dfsNumber <> w ifTrue: [
              (nodePool hasSome: [:e | e == ydash]) ifFalse: [
                workList append: ydash.
                nodePool append: ydash ] ] ] ]
    )

    private setLoopAttribute: w nodePool: nodePool loop: loop = (
      (nodes at: w) loop: loop.

      nodePool forEach: [:node |
        header at: node dfsNumber put: w.
        node union: (nodes at: w).

        node loop
          ifNotNil: [ node loop parent: loop ]
          ifNil: [ loop addNode: node bb ] ]
    )

    private stepD: w nodePool: nodePool = (
      (backPreds at: w) forEach: [:v |
        v <> w ifTrue: [ nodePool append: (nodes at: v) findSet ]
               ifFalse: [ type at: w put: #BBSelf ] ]
    )
  )

  public newInstance = ( ^ HavlakBenchmark new )
)

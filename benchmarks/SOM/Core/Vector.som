"
Copyright (c) 2001-2016 see AUTHORS.md file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

Vector = (

  | first last storage |
  
  initialize: size = (
    first := 1.
    last  := 1.

    size = 0
      ifFalse: [ storage := Array new: size ]
  )

  at: index = (
    (storage == nil or: [ index > storage length ]) ifTrue: [ ^ nil ].
    ^ storage at: index
  )
  
  at: index put: val = (
    storage == nil ifTrue: [
      storage := Array new: (index + 1 max: 10)
    ] ifFalse: [
      index > storage length ifTrue: [
        | newLength newStorage |
        newLength := storage length.
        [ newLength < index ] whileTrue: [
          newLength := newLength * 2 ].
        newStorage := Array new: newLength.
        storage doIndexes: [:i | newStorage at: i put: (storage at: i) ].
        storage := newStorage ] ].

    storage at: index put: val.
    last < (index + 1) ifTrue: [
      last := index + 1 ]
  )
  
  append: element = (
    storage == nil ifTrue: [
      storage := Array new: 10
    ] ifFalse: [
      last > storage length ifTrue: [
        "Need to expand capacity first"
        | newStorage |
        newStorage := Array new: (2 * storage length).
        storage doIndexes: [ :i | newStorage at: i put: (storage at: i) ].
        storage := newStorage ] ].
    
    storage at: last put: element.
    last := last + 1.
    ^ self
  )
  
  isEmpty  = ( ^ last = first   )
  
  forEach: block = (
    first to: last - 1 do: [ :i | block value: (storage at: i) ]
  )
  
  hasSome: block = (
    first to: last - 1 do: [ :i |
      (block value: (storage at: i))
        ifTrue: [ ^ true ] ].
    ^ false
  )
  
  getOne: block = (
    first to: last - 1 do: [ :i |
      | e |
      e := storage at: i.
      (block value: e)
        ifTrue: [ ^ e ] ].
    ^ nil
  )
  
  removeFirst = (
    self isEmpty ifTrue: [ ^ nil ].
    first := first + 1.
    ^ storage at: first - 1
  )

  removeAll = (
    first := 1.
    last  := 1.

    storage == nil ifFalse: [
      storage := Array new: storage length
    ]
  )

  remove: object = (
    | newArray newLast found |
    (storage == nil or: [ self isEmpty ]) ifTrue: [ ^ false ].

    newArray := Array new: self capacity.
    newLast := 1.
    found := false.
   
    self forEach: [ :it |
      it == object
          ifTrue:  [ found := true ]
          ifFalse: [
              newArray at: newLast put: it.
              newLast := newLast + 1 ] ].

    storage := newArray.
    last := newLast.
    first := 1.
    ^ found
  )
  
  size     = ( ^ last - first   )
  capacity = ( storage == nil ifTrue: [ ^ 0 ] ifFalse: [ ^ storage length ] )
  
  sort: aBlock = (
    " Make the argument, aBlock, be the criterion for ordering elements of
       the receiver.
       sortBlocks with side effects may not work right "
    self size > 0 ifTrue: [
      self sort: first
             to: last - 1
           with: aBlock ]
  )
  
  sort: i to: j with: sortBlock = (
    " Sort elements i through j of self to be non-descending according to
       sortBlock. "
    | di dij dj tt ij k l n |
    sortBlock isNil ifTrue: [ ^ self defaultSort: i to: j ].
    
    "The prefix d means the data at that index."
    (n := j + 1  - i) <= 1 ifTrue: [ ^ self ]. "Nothing to sort."
    " Sort di,dj. "
    di := storage at: i.
    dj := storage at: j.
    
    "i.e., should di precede dj?"
    (sortBlock value: di with: dj) ifFalse: [
      storage swap: i with: j.
      tt := di.
      di := dj.
      dj := tt
    ].

    n > 2 ifTrue: [ " More than two elements. "
      ij := (i + j) / 2.  " ij is the midpoint of i and j. "
      dij := storage at: ij.  " Sort di,dij,dj.  Make dij be their median. "
      (sortBlock value: di with: dij)
        ifTrue: [ " i.e. should di precede dij? "
          (sortBlock value: dij with: dj) ifFalse: [ " i.e., should dij precede dj? "
            storage swap: j with: ij.
            dij := dj]]
        ifFalse: [ " i.e. di should come after dij "
          storage swap: i with: ij.
          dij := di].
      
      n > 3 ifTrue: [
        " More than three elements.
          Find k>i and l<j such that dk,dij,dl are in reverse order.
          Swap k and l.  Repeat this procedure until k and l pass each other. "
        k := i.
        l := j.
        [ [l := l - 1.  k <= l and: [sortBlock value: dij with: (storage at: l)]]
            whileTrue.  " i.e. while dl succeeds dij "
          [k := k + 1.  k <= l and: [sortBlock value: (storage at: k) with: dij]]
            whileTrue.  " i.e. while dij succeeds dk "
          k <= l]
            whileTrue:
              [ storage swap: k with: l ].

        " Now l<k (either 1 or 2 less), and di through dl are all less than or equal to dk
          through dj.  Sort those two segments. "
        self sort: i to: l with: sortBlock.
        self sort: k to: j with: sortBlock
      ]
    ]
  )
  
  ----------------------------
  
  "Allocation"
  new              = ( ^ self new: 0 )
  new: initialSize = ( ^ super new initialize: initialSize )
  
  with: elem = (
    | newVector |
    newVector := self new: 1.
    newVector append: elem.
    ^ newVector
  )
)

"
Copyright 2011 Google Inc.

Licensed under the Apache License, Version 2.0 (the 'License');
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an 'AS IS' BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"

SimpleLoop = (
  | counter depthLevel 
    parent_ isRoot_ nestingLevel_
    header isReducible basicBlocks children |

  init: aBB reducible: aBool = (
    counter    := 0.
    depthLevel := 0.

    isRoot_ := false.
    nestingLevel_ := 0.
    header  := aBB.
    isReducible := aBool.
    basicBlocks := SomIdentitySet new.
    children    := SomIdentitySet new.

    aBB ifNotNil: [ basicBlocks add: aBB ]
  )

  counter = ( ^ counter )
  counter: val = ( counter := val )

  depthLevel = ( ^ depthLevel )
  depthLevel: val = ( depthLevel := val )
  
  children = ( ^ children )

  addNode: bb = (
    basicBlocks add: bb
  )
  
  addChildLoop: loop = (
    children add: loop
  )
  
  parent = ( ^ parent_ )
  parent: val = (
    parent_ := val.
    parent_ addChildLoop: self
  )
  
  isRoot    = ( ^ isRoot_ )
  setIsRoot = ( isRoot_ := true )
  
  nestingLevel = ( ^ nestingLevel_ )
  
  nestingLevel: level = (
    nestingLevel_ := level.
    level = 0 ifTrue: [ self setIsRoot ]
  )
  
  ----
  
  basicBlock: bb reducible: isReducible = (
    ^ self new init: bb reducible: isReducible
  )
)

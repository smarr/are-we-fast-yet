(*
 * Copyright (c) 2001-2016 Stefan Marr
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)

// this version uses value records where possible
module CD

    import B := Benchmark, Out

    type
        CD = pointer to record (B.Benchmark) end

    proc create*(): CD
        var c : CD
    begin
        new(c)
        return c
    end create

    proc (this: CD) benchmark(): B.Result
    begin
       assert(false) // Should never be reached
        return nil
    end benchmark
    
    proc (this: CD) verifyResult( result: B.Result ): boolean 
    begin
        assert(false) // Should never be reached
        return false
    end verifyResult

    proc benchmark2(numAircrafts: integer ): integer
        const numFrames = 200
        var simulator: Simulator
            detector: CollisionDetector
            actualCollisions, i: integer
            time: longreal
            collisions: OV.Vector
    begin
       simulator := createSimulator(numAircrafts)
      detector := createCD()

      actualCollisions := 0
      for i := 0 to numFrames-1 do
        time := flt(i) / 10.0
        collisions := detector.handleNewFrame(simulator.simulate(time))
        actualCollisions := actualCollisions + collisions.getSize()
      end

      return actualCollisions
   end benchmark2
  
    proc (this: CD) innerBenchmarkLoop*(innerIterations: integer): boolean
    begin
        if innerIterations < 2 then innerIterations := 2 end
        return verifyResult2(benchmark2(innerIterations), innerIterations) 
    end innerBenchmarkLoop

  proc verifyResult2(actualCollisions, numAircrafts: integer ): boolean
  begin
    if numAircrafts = 1000 then return actualCollisions = 14484 end
    if numAircrafts =  500 then return actualCollisions = 14484 end
    if numAircrafts =  250 then return actualCollisions = 10830 end
    if numAircrafts =  200 then return actualCollisions =  8655 end
    if numAircrafts =  100 then return actualCollisions =  4305 end
    if numAircrafts =   10 then return actualCollisions =   390 end
    if numAircrafts =    2 then return actualCollisions =    42 end

    // Checkstyle: stop
    Out.String("No verification result for ")
    Out.Int(numAircrafts,0)
    Out.String(" found") Out.Ln
    Out.String("Result is: ")
    Out.Int(actualCollisions,0) Out.Ln
    // Checkstyle: resume
    return false
  end verifyResult2

    /////////////////////////////////////////////////////////
    
    import Math
        CV := som.Vector(CallSign)
        AV := som.Vector(Aircraft)
        MV := som.Vector(Motion)
        OV := som.Vector(Collision)
        VV := som.Vector(MV.Vector)
        RCV := som.RedBlackTree(CallSign, Vector3D)
        RVV := som.RedBlackTree(Vector2D,MV.Vector)
        RVB := som.RedBlackTree(Vector2D, boolean)
        RCB := som.RedBlackTree(CallSign, boolean)

    const
        MIN_X = 0.0
        MIN_Y = 0.0
        MAX_X = 1000.0
        MAX_Y = 1000.0
        MIN_Z = 0.0
        MAX_Z = 10.0
        PROXIMITY_RADIUS = 1.0
        GOOD_VOXEL_SIZE  = PROXIMITY_RADIUS * 2.0

    /////// Vector2D ////////////////////////
    type 
        Vector2D* = record x*,y*: longreal end
    
    proc (in this: Vector2D) plus( in other: Vector2D ): Vector2D
        var res: Vector2D
    begin
        res.x := this.x + other.x
        res.y := this.y + other.y
        return res
    end plus
    
    proc (in this: Vector2D) minus( in other: Vector2D ): Vector2D
        var res: Vector2D
    begin
        res.x := this.x - other.x
        res.y := this.y - other.y
        return res
    end minus
    
    proc compareVector2D*( in lhs, rhs: Vector2D ): integer
        var result: integer
    begin
    result := compareNumbers(lhs.x, rhs.x)
    if result # 0 then
      return result
    end
    return compareNumbers(lhs.y, rhs.y)
    end compareVector2D 
    
    proc compareNumbers(a,b: longreal): integer
    begin
        if a = b then
          return 0
        end
        if a < b then
          return -1
        end
        if a > b then
          return 1
        end
    
        // We say that NaN is smaller than non-NaN.
        if a = a then
          return 1
        end
        return -1
   end compareNumbers
    
    ///////// Vector3D ////////
    type
        Vector3D = record x,y,z: longreal end
        
    proc (in this: Vector3D) plus( in other: Vector3D ): Vector3D
        var res: Vector3D
    begin
        res.x := this.x + other.x
        res.y := this.y + other.y
        res.z := this.z + other.z
        return res
    end plus
    
    proc (in this: Vector3D) minus( in other: Vector3D ): Vector3D
        var res: Vector3D
    begin
        res.x := this.x - other.x
        res.y := this.y - other.y
        res.z := this.z - other.z
        return res
    end minus
    
    proc (in this: Vector3D) times( amount: longreal ): Vector3D
        var res: Vector3D
    begin
        res.x := this.x * amount
        res.y := this.y * amount
        res.z := this.z * amount
        return res
    end times
    
    proc (in this: Vector3D) dot(in other: Vector3D): longreal
        return this.x * other.x + this.y * other.y + this.z * other.z end

    proc (in this: Vector3D) squaredMagnitude(): longreal
        return this.dot(this) end
  
    proc (in this: Vector3D) magnitude(): longreal
        return Math.sqrt(short(this.squaredMagnitude())) end
  
   ///////// CallSign /////////////
   type 
       CallSign = record value: integer end
       
    proc compareCallSign( in lhs, rhs: CallSign ): integer
    begin
        if lhs.value = rhs.value then
            return 0
        elsif lhs.value < rhs.value then
            return -1
        else
            return 1
        end
    end compareCallSign
    
    ///////// Aircraft ////////////
    type
        Aircraft = record callsign: CallSign; position: Vector3D end
        
    //////// Collision /////////////
    type 
        Collision = record 
                            aircraftA, aircraftB: CallSign
                            position: Vector3D
                        end
    
    //////// Simulator ////////////
    type
        Simulator = pointer to record aircraft: CV.Vector end                    
    
    proc createSimulator(numAircraft: integer): Simulator
        var sim: Simulator
            i: integer
            cs: CallSign
    begin
        new(sim)
        sim.aircraft := CV.create()
        for i := 0 to numAircraft-1 do
            cs.value := i
            sim.aircraft.append(cs)
        end
        return sim
    end createSimulator
    
    proc (this: Simulator) simulate(time: longreal): AV.Vector
        var frame: AV.Vector
            i: integer
            ac: Aircraft
    begin
        frame := AV.create()
        for i := 0 to this.aircraft.getSize()-1 by 2 do
            ac.callsign := this.aircraft.at(i)
            ac.position.x := time
            ac.position.y := Math.cos(short(time)) * 2.0 + flt(i) * 3.0
            ac.position.z := 10
          frame.append(ac)
            ac.callsign := this.aircraft.at(i+1)
            ac.position.y := Math.sin(short(time)) * 2.0 + flt(i) * 3.0
          frame.append(ac)
      end
        return frame
    end simulate
    
    /////////// Motion /////////////////
    type
        Motion = pointer to record
                        callsign: CallSign
                        posOne, posTwo: Vector3D
                    end
                    
    proc createMotion( in callsign: CallSign; in posOne, posTwo: Vector3D ): Motion
        var m: Motion
    begin
        new(m)
        m.callsign := callsign
        m.posOne := posOne
        m.posTwo := posTwo
        return m
    end createMotion
    
    proc (this: Motion) delta(): Vector3D
    return this.posTwo.minus(this.posOne) end

    proc (this: Motion) findIntersection(other: Motion; var result: Vector3D ): boolean
        var init1, init2, vec1, vec2, result1, result2: Vector3D
            radius, a, b, c, discr, v, v1, v2, dist: longreal
    begin
    init1 := this.posOne
    init2 := other.posOne
    vec1 := this.delta()
    vec2 := other.delta()
    radius := PROXIMITY_RADIUS

    // this test is not geometrical 3-d intersection test, it takes the fact that the aircraft move
    // into account ; so it is more like a 4d test
    // (it assumes that both of the aircraft have a constant speed over the tested interval)

    // we thus have two points, each of them moving on its line segment at constant speed ; we are looking
    // for times when the distance between these two points is smaller than r

    // vec1 is vector of aircraft 1
    // vec2 is vector of aircraft 2

    // a = (V2 - V1)^T * (V2 - V1)
    a := vec2.minus(vec1).squaredMagnitude()

    if a # 0.0 then
      // we are first looking for instances of time when the planes are exactly r from each other
      // at least one plane is moving ; if the planes are moving in parallel, they do not have constant speed

      // if the planes are moving in parallel, then
      //   if the faster starts behind the slower, we can have 2, 1, or 0 solutions
      //   if the faster plane starts in front of the slower, we can have 0 or 1 solutions

      // if the planes are not moving in parallel, then

      // point P1 = I1 + vV1
      // point P2 = I2 + vV2
      //   - looking for v, such that dist(P1,P2) = || P1 - P2 || = r

      // it follows that || P1 - P2 || = sqrt( < P1-P2, P1-P2 > )
      //   0 = -r^2 + < P1 - P2, P1 - P2 >
      //  from properties of dot product
      //   0 = -r^2 + <I1-I2,I1-I2> + v * 2<I1-I2, V1-V2> + v^2 *<V1-V2,V1-V2>
      //   so we calculate a, b, c - and solve the quadratic equation
      //   0 = c + bv + av^2

      // b = 2 * <I1-I2, V1-V2>
      b := 2.0 * init1.minus(init2).dot(vec1.minus(vec2))

      // c = -r^2 + (I2 - I1)^T * (I2 - I1)
      c := -radius * radius + init2.minus(init1).squaredMagnitude()

      discr := b * b - 4.0 * a * c
      if discr < 0.0 then
        return false
      end

      v1 := (-b - Math.sqrt(short(discr))) / (2.0 * a)
      v2 := (-b + Math.sqrt(short(discr))) / (2.0 * a)

      if (v1 <= v2) & (((v1  <= 1.0) & (1.0 <= v2)) or
                       ((v1  <= 0.0) & (0.0 <= v2)) or
                       ((0.0 <= v1)  & (v2  <= 1.0))) then
        // Pick a good "time" at which to report the collision.
        if v1 <= 0.0 then
          // The collision started before this frame. Report it at the start of the frame.
          v := 0.0;
        else
          // The collision started during this frame. Report it at that moment.
          v := v1
        end

        result1 := init1.plus(vec1.times(v))
        result2 := init2.plus(vec2.times(v));

        result := result1.plus(result2).times(0.5)
        if (result.x >= MIN_X) &
            (result.x <= MAX_X) &
            (result.y >= MIN_Y) &
            (result.y <= MAX_Y) &
            (result.z >= MIN_Z) &
            (result.z <= MAX_Z) then
          return true
        end
      end

      return false
    end

    // the planes have the same speeds and are moving in parallel (or they are not moving at all)
    // they  thus have the same distance all the time ; we calculate it from the initial point

    // dist = || i2 - i1 || = sqrt(  ( i2 - i1 )^T * ( i2 - i1 ) )
    dist := init2.minus(init1).magnitude()
    if dist <= radius then
      result := init1.plus(init2).times(0.5)
      return true
    end

    return false
  end findIntersection
        
  //////////// CollisionDetector //////////////
  type
      CollisionDetector = pointer to record state: RCV.RedBlackTree end
      
   proc createCD(): CollisionDetector
      var cd: CollisionDetector
    begin
        new(cd)
        cd.state := RCV.create(compareCallSign)
        return cd
    end createCD
    
    var horizontal, vertical: Vector2D
    
    proc (this: CollisionDetector) handleNewFrame(frame: AV.Vector): OV.Vector
      type
          ForEachInterface = record (RCV.ForEachInterface) 
                                      toRemove: CV.Vector 
                                      seen: RCB.RedBlackTree
                                      end
      
      proc (var this: ForEachInterface) apply(in elem: RCV.Entry) 
      begin
          if ~this.seen.get(elem.key) then
             this.toRemove.append(elem.key)
          end      
      end apply

        var motions: MV.Vector
            seen: RCB.RedBlackTree
            i,j,k: integer
            aircraft: Aircraft
            oldPosition, newPosition: Vector3D
            toRemove: CV.Vector
            collisions: OV.Vector
            dummy: boolean
            dummy2: Vector3D
            it: ForEachInterface
            allReduced: VV.Vector
            reduced: MV.Vector
            motion1, motion2: Motion
            collisionPos: Vector3D
            collision: Collision
            newEntry: boolean
    begin
    motions := MV.create()
    seen := RCB.create(compareCallSign)

     for i := 0 to frame.getSize()-1 do
         aircraft := frame.at(i)
       oldPosition := this.state.putChecked(aircraft.callsign, aircraft.position, newEntry)
       newPosition := aircraft.position;
       dummy := seen.put(aircraft.callsign, true)

        if newEntry then 
           // Treat newly introduced aircraft as if they were stationary.
            oldPosition := newPosition
       end
       motions.append(createMotion(aircraft.callsign,oldPosition,newPosition))
    end

    // Remove aircraft that are no longer present.
    toRemove := CV.create()
    it.toRemove := toRemove
    it.seen := seen
    this.state.forEach(it)
    
     for i := 0 to toRemove.getSize()-1 do
         dummy2 := this.state.remove(toRemove.at(i))
     end

    allReduced := reduceCollisionSet(motions)
    collisions := OV.create()
    
    for k := 0 to allReduced.getSize()-1 do
       reduced := allReduced.at(k)
      for i := 0 to reduced.getSize()-1 do
        motion1 := reduced.at(i)
        for j := i + 1 to reduced.getSize()-1 do
          motion2 := reduced.at(j)
          if motion1.findIntersection(motion2,collisionPos) then
             collision.aircraftA := motion1.callsign
              collision.aircraftB := motion2.callsign
              collision.position := collisionPos
            collisions.append(collision)
          end
        end
      end
    end

    return collisions
  end handleNewFrame
    
    proc isInVoxel(in voxel: Vector2D; motion: Motion ): boolean
        var init, fin: Vector3D
            v_s, r, v_x, x0, xv, v_y, y0, yv, low_x, high_x, tmp,
                low_y, high_y: longreal
    begin
    if (voxel.x > MAX_X) or
        (voxel.x < MIN_X) or
        (voxel.y > MAX_Y) or
        (voxel.y < MIN_Y) then
      return false
    end

    init := motion.posOne
    fin  := motion.posTwo

    v_s := GOOD_VOXEL_SIZE
    r   := PROXIMITY_RADIUS / 2.0

    v_x := voxel.x
    x0 := init.x
    xv := fin.x - init.x

    v_y := voxel.y
    y0 := init.y
    yv := fin.y - init.y

    low_x := (v_x - r - x0) / xv
    high_x := (v_x + v_s + r - x0) / xv

    if xv < 0.0 then
      tmp := low_x
      low_x := high_x
      high_x := tmp
    end

    low_y  := (v_y - r - y0) / yv
    high_y := (v_y + v_s + r - y0) / yv

    if yv < 0.0 then
      tmp := low_y
      low_y := high_y
      high_y := tmp
    end

    return (((xv = 0.0) & (v_x <= x0 + r) & (x0 - r <= v_x + v_s)) (* no motion in x *) or
             ((low_x <= 1.0) & (1.0 <= high_x)) or ((low_x <= 0.0) & (0.0 <= high_x)) or
              ((0.0 <= low_x) & (high_x <= 1.0))) &
            (((yv = 0.0) & (v_y <= y0 + r) & (y0 - r <= v_y + v_s)) (* no motion in y *) or
             (((low_y <= 1.0) & (1.0 <= high_y)) or ((low_y <= 0.0) & (0.0 <= high_y)) or
              ((0.0 <= low_y) & (high_y <= 1.0)))) &
            ((xv = 0.0) or (yv = 0.0) or (* no motion in x or y or both *)
             ((low_y <= high_x) & (high_x <= high_y)) or
             ((low_y <= low_x) & (low_x <= high_y)) or
             ((low_x <= low_y) & (high_y <= high_x)))
  end isInVoxel

  proc putIntoMap( voxelMap: RVV.RedBlackTree; in voxel: Vector2D; motion: Motion)
      var arr, dummy: MV.Vector
  begin
    arr := voxelMap.get(voxel)
    if arr = nil then
      arr := MV.create()
      dummy := voxelMap.put(voxel, arr)
    end
    arr.append(motion)
  end putIntoMap

  proc reduceCollisionSet(motions: MV.Vector): VV.Vector
      type
          ForEachInterface = record (RVV.ForEachInterface) result: VV.Vector end
      
      proc (var this: ForEachInterface) apply(in elem: RVV.Entry) 
      begin
          if elem.value.getSize() > 1 then
              this.result.append(elem.value)
          end
      end apply
      
      var voxelMap: RVV.RedBlackTree
          result: VV.Vector
          i: integer
          it: ForEachInterface
  begin
    voxelMap := RVV.create(compareVector2D)
    
    for i := 0 to motions.getSize()-1 do
        drawMotionOnVoxelMap(voxelMap, motions.at(i))
    end
    
    result := VV.create()
    it.result := result
    voxelMap.forEach(it)

    return result;
  end reduceCollisionSet
  
  proc recurse( voxelMap: RVV.RedBlackTree; seen: RVB.RedBlackTree; 
                  in nextVoxel: Vector2D; motion: Motion )
  begin
    if ~isInVoxel(nextVoxel, motion) then
      return
    end

    if seen.put(nextVoxel, true) then
      return
    end

    putIntoMap(voxelMap, nextVoxel, motion)

    recurse(voxelMap, seen, nextVoxel.minus(horizontal), motion)
    recurse(voxelMap, seen, nextVoxel.plus(horizontal), motion)
    recurse(voxelMap, seen, nextVoxel.minus(vertical), motion)
    recurse(voxelMap, seen, nextVoxel.plus(vertical), motion)
    recurse(voxelMap, seen, nextVoxel.minus(horizontal).minus(vertical), motion)
    recurse(voxelMap, seen, nextVoxel.minus(horizontal).plus(vertical), motion)
    recurse(voxelMap, seen, nextVoxel.plus(horizontal).minus(vertical), motion)
    recurse(voxelMap, seen, nextVoxel.plus(horizontal).plus(vertical), motion)
  end recurse
  
  proc voxelHash(in position: Vector3D ): Vector2D 
      var xDiv, yDiv: integer
          x,y: longreal
          res: Vector2D
  begin
    xDiv := floor(short(position.x / GOOD_VOXEL_SIZE))
    yDiv := floor(short(position.y / GOOD_VOXEL_SIZE))

    x := GOOD_VOXEL_SIZE * flt(xDiv)
    y := GOOD_VOXEL_SIZE * flt(yDiv)

    if position.x < 0.0 then
      x := x - GOOD_VOXEL_SIZE
    end
    if position.y < 0.0 then
      y := y - GOOD_VOXEL_SIZE
    end

     res.x := x
     res.y := y
     return res
  end voxelHash
  
  proc drawMotionOnVoxelMap( voxelMap: RVV.RedBlackTree; motion: Motion )
      var seen: RVB.RedBlackTree
  begin
      seen := RVB.create(compareVector2D)
     recurse(voxelMap, seen, voxelHash(motion.posOne), motion)
  end drawMotionOnVoxelMap
  
  
begin
    horizontal.x := GOOD_VOXEL_SIZE
    horizontal.y := 0.0
    vertical.x := 0.0
    vertical.y := GOOD_VOXEL_SIZE    
end CD

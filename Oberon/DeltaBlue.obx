(*
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * This benchmark is derived from Mario Wolczko's Java and Smalltalk version of
 * DeltaBlue.
 *
 * It is modified to use the SOM class library and Java 8 features.
 * License details:
 *   http://web.archive.org/web/20050825101121/http://www.sunlabs.com/people/mario/java_benchmarking/index.html
 *)

module DeltaBlue

    import B := Benchmark
    
    type
        DeltaBlue = pointer to record (B.Benchmark) end

    proc create*(): DeltaBlue
        var d : DeltaBlue
    begin
        new(d)
        return d
    end create

    proc (this: DeltaBlue) benchmark(): B.Result
    begin
       assert(false) // Should never be reached
        return nil
    end benchmark
    
    proc (this: DeltaBlue) verifyResult( result: B.Result ): boolean 
    begin
        assert(false) // Should never be reached
        return false
    end verifyResult
    
    proc (this: DeltaBlue) innerBenchmarkLoop(innerIterations: integer): boolean
    begin
        chainTest(innerIterations)
        projectionTest(innerIterations)
        return true
    end innerBenchmarkLoop
        
    //////////// Sym ///////////////////////
    type 
        Sym = pointer to record hash: integer end // this could be a value type
        
    proc createSym(hash: integer): Sym
        var s: Sym
    begin
        new(s)
        s.hash := hash
        return s
    end createSym
    
    proc symHash(in k: Sym):integer
        return k.hash end
        
    var
        ABSOLUTE_STRONGEST,
        REQUIRED,
        STRONG_PREFERRED,
        PREFERRED,
        STRONG_DEFAULT,
        DEFAULT,
        WEAK_DEFAULT,
        ABSOLUTE_WEAKEST: Sym
        
    /////////// Strength //////////////////
    (*
     * Strengths are used to measure the relative importance of constraints. New
     * strengths may be inserted in the strength hierarchy without disrupting
     * current constraints. Strengths cannot be created outside this class, so
     * pointer comparison can be used for value comparison.
   *)
    import 
        SID := som.IdentityDictionary2(Sym,integer,symHash)
        SSD := som.IdentityDictionary2(Sym,Strength,symHash)
    type
        Strength = pointer to record
                            arithmeticValue: integer
                            symbolicValue: Sym
                        end
    var
        absoluteWeakest, required: Strength
        strengthTable: SID.IdentityDictionary
        strengthConstant: SSD.IdentityDictionary
    
    proc createStrength(symbolicValue: Sym): Strength        
        var s: Strength
    begin
        new(s)
        s.symbolicValue := symbolicValue
        s.arithmeticValue := strengthTable.at(symbolicValue)
        return s
    end createStrength
        
    proc (this: Strength) sameAs(s: Strength): boolean
        return this.arithmeticValue = s.arithmeticValue end

    proc (this: Strength) stronger(s: Strength): boolean
        return this.arithmeticValue < s.arithmeticValue end

    proc (this: Strength) weaker(s: Strength): boolean
        return this.arithmeticValue > s.arithmeticValue end

    proc (this: Strength) strongest(s: Strength): Strength
    begin
        if s.stronger(this) then
            return s
        else 
            return this
        end
    end strongest

    proc (this: Strength) weakest(s: Strength): Strength
    begin
        if s.weaker(this) then
            return s
        else 
            return this
        end
    end weakest

    ////////////////////// AbstractConstraint //////////////////////
    // I am an abstract class representing a system-maintainable
    // relationship (or "constraint") between a set of variables. I supply
    // a strength instance variable; concrete subclasses provide a means
    // of storing the constrained variables and other information required
    // to represent a constraint.
    import
        IV := som.Interfaces(Variable)
        
    type 
        AbstractConstraint = pointer to record strength: Strength end
        Direction = ( INVALID, FORWARD, BACKWARD )
        
    proc (this: AbstractConstraint) initAbstractConstraint(strength: Sym)
    begin
        this.strength := strengthConstant.at(strength)
    end initAbstractConstraint
    
    proc equalConstraint(in lhs, rhs: AbstractConstraint): boolean
        return lhs = rhs end
        
    // Normal constraints are not input constraints. An input constraint
   // is one that depends on external state, such as the mouse, the
   // keyboard, a clock, or some arbitrary piece of imperative code.
   proc (this: AbstractConstraint) isInput(): boolean end

   // Answer true if this constraint is satisfied in the current solution.
   proc (this: AbstractConstraint) isSatisfied(): boolean end
   
   proc (this: AbstractConstraint) addToGraph() end
   
   // Remove myself from the constraint graph.
   proc (this: AbstractConstraint) removeFromGraph() end

   // Decide if I can be satisfied and record that decision. The output
   // of the chosen method must not have the given mark and must have
   // a walkabout strength less than that of this constraint.
   proc (this: AbstractConstraint) chooseMethod(mark: integer): Direction end

   // Enforce this constraint. Assume that it is satisfied.
   proc (this: AbstractConstraint) execute() end

   proc (this: AbstractConstraint) addConstraint(planner: Planner)
   begin
    this.addToGraph()
    planner.incrementalAdd(this)
   end addConstraint
   
   // Deactivate this constraint, remove it from the constraint graph,
   // possibly causing other constraints to be satisfied, and destroy it.
   proc (this: AbstractConstraint) destroyConstraint(planner: Planner )
   begin
    if this.isSatisfied() then
      planner.incrementalRemove(this)
    end
    this.removeFromGraph()
   end destroyConstraint
   
   proc (this: AbstractConstraint) inputsDo(var fn: IV.ForEachInterfaceRW) end
   proc (this: AbstractConstraint) inputsHasOne(var fn: IV.TestInterface): boolean end

    proc (this: AbstractConstraint) inputsKnown(mark: integer): boolean
        type TI = record(IV.TestInterface) mark: integer end
        proc (var this: TI) test(in v: Variable) : boolean 
            return ~( (v.mark = this.mark) or v.stay or (v.determinedBy = nil) ) end
        var i: TI
    begin
        i.mark := mark
        return ~this.inputsHasOne(i)
    end inputsKnown
    
    // Record the fact that I am unsatisfied.
   proc (this: AbstractConstraint) markUnsatisfied() end

   // Answer my current output variable. Raise an error if I am not
   // currently satisfied.
   proc (this: AbstractConstraint) getOutput(): Variable end

   // Calculate the walkabout strength, the stay flag, and, if it is
   // 'stay', the value for the current output of this
   // constraint. Assume this constraint is satisfied.
   proc (this: AbstractConstraint) recalculate() end

  // Attempt to find a way to enforce this constraint. If successful,
  // record the solution, perhaps modifying the current dataflow
  // graph. Answer the constraint that this constraint overrides, if
  // there is one, or nil, if there isn't.
  // Assume: I am not already satisfied.
  //
  proc (this: AbstractConstraint) satisfy(mark: integer; planner: Planner): AbstractConstraint
     type FI = record(IV.ForEachInterfaceRW) mark: integer end
     proc (var this: FI) apply(var v: Variable) 
     begin
         v.mark := this.mark
     end apply
    var overridden: AbstractConstraint
        out: Variable 
        iter: FI
        dummy: Direction
  begin
    dummy := this.chooseMethod(mark)

    if this.isSatisfied() then
      // constraint can be satisfied
      // mark inputs to allow cycle detection in addPropagate
      iter.mark := mark
      this.inputsDo(iter)

      out := this.getOutput()
      overridden := out.determinedBy
      if overridden # nil then
        overridden.markUnsatisfied()
      end
      out.determinedBy := this
      if ~planner.addPropagate(this, mark) then
        assert(false) // "Cycle encountered"
      end
      out.mark := mark
    else
      overridden := nil
      if this.strength.sameAs(required) then
        assert(false) // "Could not satisfy a required constraint"
      end
    end
    return overridden
  end satisfy
  
    /////////////////// Variable ///////////////////////
    import
        ACV := som.Vector(AbstractConstraint)
    type
        Variable = pointer to record 
                        value: integer
                        constraints: ACV.Vector
                        determinedBy: AbstractConstraint
                        mark: integer 
                        walkStrength: Strength
                        stay: boolean
                    end
    
    proc value(aValue: integer):Variable
        var v: Variable
    begin
        new(v)
        v.value := aValue
        v.constraints := ACV.create()
        v.walkStrength := absoluteWeakest
        v.stay := true
        v.mark := 0
        return v
    end value
    
    proc (this: Variable) addConstraint(c: AbstractConstraint)
    begin
    this.constraints.append(c)
    end addConstraint
    
    proc (this: Variable) removeConstraint(c: AbstractConstraint)
        var _: boolean
    begin
    _ := this.constraints.remove(c,equalConstraint)
    if this.determinedBy = c then
      this.determinedBy := nil
    end
   end removeConstraint

    //////////////////// Plan ////////////////////////
    // A Plan is an ordered list of constraints to be executed in sequence
    // to resatisfy all currently satisfiable constraints in the face of
    // one or more changing inputs.
    type 
        Plan = pointer to record plan: ACV.Vector end
        
    proc (this: Plan) execute()
        var i: integer
    begin
        for i := 0 to this.plan.getSize()-1 do
            this.plan.at(i).execute()
        end
    end execute
    
   /////////////////// Planner ///////////////////////////
   type
       Planner = pointer to record currentMark: integer end

    proc createPlanner(): Planner
        var p: Planner
    begin
        new(p)
        p.currentMark := 1
        return p
    end createPlanner
    
  // Attempt to satisfy the given constraint and, if successful,
  // incrementally update the dataflow graph. Details: If satifying
  // the constraint is successful, it may override a weaker constraint
  // on its output. The algorithm attempts to resatisfy that
  // constraint using some other method. This process is repeated
  // until either a) it reaches a variable that was not previously
  // determined by any constraint or b) it reaches a constraint that
  // is too weak to be satisfied using any of its methods. The
  // variables of constraints that have been processed are marked with
  // a unique mark value so that we know where we've been. This allows
  // the algorithm to avoid getting into an infinite loop even if the
  // constraint graph has an inadvertent cycle.
  //
  proc (this: Planner) incrementalAdd(c: AbstractConstraint) 
      var mark: integer
          overridden: AbstractConstraint
  begin
    mark := this.newMark()
    overridden := c.satisfy(mark, this)

    while overridden # nil do
      overridden := overridden.satisfy(mark, this)
    end
  end incrementalAdd

  // Entry point for retracting a constraint. Remove the given
  // constraint and incrementally update the dataflow graph.
  // Details: Retracting the given constraint may allow some currently
  // unsatisfiable downstream constraint to be satisfied. We therefore collect
  // a list of unsatisfied downstream constraints and attempt to
  // satisfy each one in turn. This list is traversed by constraint
  // strength, strongest first, as a heuristic for avoiding
  // unnecessarily adding and then overriding weak constraints.
  // Assume: c is satisfied.
  //
  proc (this: Planner) incrementalRemove(c: AbstractConstraint)
    var out: Variable 
        unsatisfied: ACV.Vector
        i: integer
  begin
    out := c.getOutput()
    c.markUnsatisfied()
    c.removeFromGraph()

    unsatisfied := this.removePropagateFrom(out)
    for i := 0 to unsatisfied.getSize()-1 do
        this.incrementalAdd(unsatisfied.at(i))
     end
  end incrementalRemove
        
  // Extract a plan for resatisfaction starting from the outputs of
  // the given constraints, usually a set of input constraints.
  //
  proc (this: Planner) extractPlanFromConstraints(constraints: ACV.Vector): Plan
      var sources: ACV.Vector
          i: integer
          c: AbstractConstraint
  begin
    sources := ACV.create()

     for i := 0 to constraints.getSize()-1 do
         c := constraints.at(i)
       if c.isInput() & c.isSatisfied() then
        sources.append(c)
       end
    end

    return this.makePlan(sources)
  end extractPlanFromConstraints

  // Extract a plan for resatisfaction starting from the given source
  // constraints, usually a set of input constraints. This method
  // assumes that stay optimization is desired; the plan will contain
  // only constraints whose output variables are not stay. Constraints
  // that do no computation, such as stay and edit constraints, are
  // not included in the plan.
  // Details: The outputs of a constraint are marked when it is added
  // to the plan under construction. A constraint may be appended to
  // the plan when all its input variables are known. A variable is
  // known if either a) the variable is marked (indicating that has
  // been computed by a constraint appearing earlier in the plan), b)
  // the variable is 'stay' (i.e. it is a constant at plan execution
  // time), or c) the variable is not determined by any
  // constraint. The last provision is for past states of history
  // variables, which are not stay but which are also not computed by
  // any constraint.
  // Assume: sources are all satisfied.
  //
  proc (this: Planner) makePlan(sources: ACV.Vector): Plan
      var mark: integer
          plan: Plan
          todo: ACV.Vector
          c: AbstractConstraint
  begin
    mark := this.newMark()
    new(plan)
    plan.plan := ACV.create()
    todo := sources

    while ~todo.isEmpty() do
      c := todo.removeFirst()

      if (c.getOutput().mark # mark) & c.inputsKnown(mark) then
        // not in plan already and eligible for inclusion
        plan.plan.append(c)
        c.getOutput().mark := mark
        this.addConstraintsConsumingTo(c.getOutput(), todo)
      end
    end
    return plan
  end makePlan
  
  // The given variable has changed. Propagate new values downstream.
  proc (this: Planner) propagateFrom(v: Variable)
      var todo: ACV.Vector
          c: AbstractConstraint
  begin
    todo := ACV.create()
    this.addConstraintsConsumingTo(v, todo)

    while ~todo.isEmpty() do
      c := todo.removeFirst()
      c.execute()
      this.addConstraintsConsumingTo(c.getOutput(), todo)
    end
  end propagateFrom
  
  proc (this: Planner) addConstraintsConsumingTo(v: Variable; coll: ACV.Vector)
      var determiningC, c: AbstractConstraint
          i: integer
  begin
    determiningC := v.determinedBy

     for i := 0 to v.constraints.getSize()-1 do
         c := v.constraints.at(i)
        if (c # determiningC) & c.isSatisfied() then
        coll.append(c)
       end
    end
  end addConstraintsConsumingTo
  
  // Recompute the walkabout strengths and stay flags of all variables
  // downstream of the given constraint and recompute the actual
  // values of all variables whose stay flag is true. If a cycle is
  // detected, remove the given constraint and answer
  // false. Otherwise, answer true.
  // Details: Cycles are detected when a marked variable is
  // encountered downstream of the given constraint. The sender is
  // assumed to have marked the inputs of the given constraint with
  // the given mark. Thus, encountering a marked node downstream of
  // the output constraint means that there is a path from the
  // constraint's output to one of its inputs.
  //
  proc (this: Planner) addPropagate(c: AbstractConstraint; mark: integer): boolean
      var todo: ACV.Vector
          d: AbstractConstraint
  begin
    todo := ACV.createWithElement(c)

    while ~todo.isEmpty() do
      d := todo.removeFirst()

      if d.getOutput().mark = mark then
        this.incrementalRemove(c)
        return false;
      end
      d.recalculate()
      this.addConstraintsConsumingTo(d.getOutput(), todo)
    end
    return true;
  end addPropagate

  proc (this: Planner) change(v: Variable; newValue: integer)
      var editC: EditConstraint 
          editV: ACV.Vector
          plan: Plan
          i: integer
  begin
    editC := createEditConstraint(v, PREFERRED, this)

    editV := ACV.createWithElement(editC) 
    plan := this.extractPlanFromConstraints(editV)
    for i := 0 to 10-1 do
      v.value := newValue
      plan.execute()
    end
    editC.destroyConstraint(this)
  end change

  import
      IAC := som.Interfaces(AbstractConstraint)
      
  proc (this: Planner) constraintsConsuming(v: Variable; var fn: IAC.ForEachInterface)
      var determiningC, c: AbstractConstraint
          i: integer
  begin
    determiningC := v.determinedBy
    for i := 0 to v.constraints.getSize()-1 do
        c := v.constraints.at(i)
       if (c # determiningC) & c.isSatisfied() then
        fn.apply(c)
       end
    end
  end constraintsConsuming

  // Select a previously unused mark value.
  proc (this: Planner) newMark(): integer
      var cur: integer
  begin
      cur := this.currentMark // like the Lua (not Java) implementation
    inc(this.currentMark)
    return cur
    (*
    inc(this.currentMark) // like Java
    return this.currentMark *)
  end newMark

  import
      VAV := som.Vector(Variable)
      
  // Update the walkabout strengths and stay flags of all variables
  // downstream of the given constraint. Answer a collection of
  // unsatisfied constraints sorted in order of decreasing strength.
  proc (this: Planner) removePropagateFrom(out: Variable): ACV.Vector
      type FI = record(IAC.ForEachInterface) todo: VAV.Vector end
      proc (var this: FI) apply(in c: AbstractConstraint) 
      begin
          c.recalculate()
        this.todo.append(c.getOutput())
      end apply
      type IC = record(IAC.Comparator) end
      proc (var this: IC) compare( in c1,c2: AbstractConstraint ) : integer 
      begin
       if c1.strength.stronger(c2.strength) then
           return -1
         else
           return 1
         end
      end compare
      var unsatisfied: ACV.Vector
          todo: VAV.Vector
          v: Variable
          i: integer
          c: AbstractConstraint
          iter1: FI
          iter2: IC
  begin
    unsatisfied := ACV.create()

    out.determinedBy := nil
    out.walkStrength := absoluteWeakest
    out.stay := true

    todo := VAV.createWithElement(out)

    while ~todo.isEmpty() do
      v := todo.removeFirst()

        for i := 0 to v.constraints.getSize()-1 do
            c := v.constraints.at(i)
        if ~c.isSatisfied() then
            unsatisfied.append(c)
         end
       end

        iter1.todo := todo
      this.constraintsConsuming(v, iter1)
    end

    unsatisfied.sort(iter2)
    return unsatisfied;
  end removePropagateFrom

  // This is the standard DeltaBlue benchmark. A long chain of
  // equality constraints is constructed with a stay constraint on
  // one end. An edit constraint is then added to the opposite end
  // and the time is measured for adding and removing this
  // constraint, and extracting and executing a constraint
  // satisfaction plan. There are two cases. In case 1, the added
  // constraint is stronger than the stay constraint and values must
  // propagate down the entire length of the chain. In case 2, the
  // added constraint is weaker than the stay constraint so it cannot
  // be accomodated. The cost in this case is, of course, very
  // low. Typical situations lie somewhere between these two
  // extremes.
  //
  proc chainTest(n: integer)
      var planner: Planner 
              vars: pointer to array of Variable
              i: integer
              v1, v2: Variable
              dummy: EqualityConstraint
              editC: EditConstraint
              editV: ACV.Vector
              plan: Plan 
              dummy2: StayConstraint
  begin
    planner := createPlanner()
    new(vars, n + 1)
    for i := 0 to n do
        vars[i] := value(0)
     end

    // Build chain of n equality constraints
    for i := 0 to n-1 do
      v1 := vars[i]
      v2 := vars[i + 1]
      dummy := createEqualityConstraint(v1, v2, REQUIRED, planner)
    end

    dummy2 := createStayConstraint(vars[n], STRONG_DEFAULT, planner)
    editC := createEditConstraint(vars[0], PREFERRED, planner)

    editV := ACV.createWithElement(editC) 
    plan := planner.extractPlanFromConstraints(editV);
    for i := 0 to 100-1 do
      vars[0].value := i
      plan.execute()
      if vars[n].value # i then
        assert(false) // "Chain test failed!"
      end
    end
    editC.destroyConstraint(planner)
  end chainTest
  
  // This test constructs a two sets of variables related to each
  // other by a simple linear transformation (scale and offset). The
  // time is measured to change a variable on either side of the
  // mapping and to change the scale and offset factors.
  //
  proc projectionTest(n: integer)
      var planner: Planner
          dests: VAV.Vector
          scale, offset, src, dst: Variable
          i: integer
          dummy1: StayConstraint
          dummy2: ScaleConstraint
  begin
    planner := createPlanner()

    dests := VAV.create()

    scale  := value(10)
    offset := value(1000)

    for i := 1 to n do
      src := value(i)
      dst := value(i)
      dests.append(dst)
      dummy1 := createStayConstraint(src, DEFAULT, planner)
      dummy2 := createScaleConstraint(src, scale, offset, dst, REQUIRED, planner)
    end

    planner.change(src, 17)
    if dst.value # 1170 then
      assert(false) //"Projection test 1 failed!"
    end

    planner.change(dst, 1050)
    if src.value # 5 then
      assert(false) //"Projection test 2 failed!"
    end

    planner.change(scale, 5)
    for i := 0 to n - 2 do
      if dests.at(i).value # (i + 1) * 5 + 1000 then
        assert(false) //"Projection test 3 failed!"
      end
    end

    planner.change(offset, 2000)
    for i := 0 to n - 2 do
      if dests.at(i).value # (i + 1) * 5 + 2000 then
        assert(false) // "Projection test 4 failed!"
      end
    end 
  end projectionTest
  
  ////////////////// UnaryConstraint ///////////////////7
  type
      UnaryConstraint = pointer to record(AbstractConstraint) 
                                      output: Variable
                                      satisfied: boolean
                                      end
  
  proc (this:UnaryConstraint) initUnaryConstraint(v: Variable; strength: Sym; planner: Planner)
  begin
      this.initAbstractConstraint(strength)
      this.output := v
      this.addConstraint(planner)
  end initUnaryConstraint
  
  proc (this: UnaryConstraint) isSatisfied(): boolean return this.satisfied end
  
  proc (this: UnaryConstraint) addToGraph() 
  begin
      this.output.addConstraint(this)
     this.satisfied := false
  end addToGraph

  proc (this: UnaryConstraint) removeFromGraph() 
  begin
    if this.output # nil then
      this.output.removeConstraint(this)
    end
    this.satisfied := false
  end removeFromGraph

  proc (this: UnaryConstraint) chooseMethod(mark: integer): Direction 
  begin
    this.satisfied := (this.output.mark # mark)
        & (this.strength.stronger(this.output.walkStrength))
    return INVALID
  end chooseMethod
  
  proc (this: UnaryConstraint) markUnsatisfied()
  begin
      this.satisfied := false
  end markUnsatisfied
  
  proc (this: UnaryConstraint) getOutput(): Variable return this.output end

  proc (this: UnaryConstraint) recalculate() 
  begin
    this.output.walkStrength := this.strength
    this.output.stay := ~this.isInput()
    if this.output.stay then
      this.execute() // stay optimization
    end
  end recalculate

  //////////// EditConstraint ///////////////
  // I am a unary input constraint used to mark a variable that the
  // client wishes to change.
  type
      EditConstraint = pointer to record(UnaryConstraint) end
      
  proc createEditConstraint(v: Variable; strength: Sym; planner: Planner):EditConstraint
      var this: EditConstraint
  begin
      new(this)
      this.initUnaryConstraint(v,strength,planner)
      return this
  end createEditConstraint
 
  proc (this: EditConstraint) isInput(): boolean return true end

  // execute() // Edit constraints do nothing.
  
  ///////////// StayConstraint ////////////////////
  type
      StayConstraint = pointer to record(UnaryConstraint) end
  
  proc createStayConstraint(v: Variable; strength: Sym; planner: Planner):StayConstraint
      var this: StayConstraint
  begin
      new(this)
      this.initUnaryConstraint(v,strength,planner)
      return this
  end createStayConstraint
  
  // execute() // Stay constraints do nothing.
  
  //////////////// BinaryConstraint /////////////////
  type
      BinaryConstraint = pointer to record(AbstractConstraint)
                                      v1,v2: Variable
                                      direction: Direction
                                    end
                                
  proc (this: BinaryConstraint) initBinaryConstraint(var1, var2: Variable;
      strength: Sym; planner: Planner )
  begin
      this.initAbstractConstraint(strength)
      this.v1 := var1
      this.v2 := var2
      this.direction := INVALID
  end initBinaryConstraint
  
  proc (this: BinaryConstraint) isSatisfied(): boolean return this.direction # INVALID end

  proc (this: BinaryConstraint) addToGraph() 
  begin
    this.v1.addConstraint(this)
    this.v2.addConstraint(this)
    this.direction := INVALID
  end addToGraph

  proc (this: BinaryConstraint) removeFromGraph()
  begin
    if this.v1 # nil then
      this.v1.removeConstraint(this)
    end
    if this.v2 # nil then
      this.v2.removeConstraint(this)
    end
    this.direction := INVALID
  end removeFromGraph

  // Decide if I can be satisfied and which way I should flow based on
  // the relative strength of the variables I relate, and record that
  // decision.
  //
  proc (this: BinaryConstraint) chooseMethod(mark: integer): Direction
  begin
    if this.v1.mark = mark then
      if (this.v2.mark # mark) & this.strength.stronger(this.v2.walkStrength) then
        this.direction := FORWARD
        return this.direction
      else
        this.direction := INVALID
        return this.direction
      end
    end

    if this.v2.mark = mark then
      if (this.v1.mark # mark) & this.strength.stronger(this.v1.walkStrength) then
        this.direction := BACKWARD
        return this.direction
      else
        this.direction := INVALID
        return this.direction
      end
    end

    // If we get here, neither variable is marked, so we have a choice.
    if this.v1.walkStrength.weaker(this.v2.walkStrength) then
      if this.strength.stronger(this.v1.walkStrength) then
        this.direction := BACKWARD
        return this.direction
      else
        this.direction := INVALID
        return this.direction
      end
    else
      if this.strength.stronger(this.v2.walkStrength) then
        this.direction := FORWARD
        return this.direction
      else
        this.direction := INVALID
        return this.direction
      end
    end
  end chooseMethod

  proc (this: BinaryConstraint) inputsDo(var fn: IV.ForEachInterfaceRW)
  begin
    if this.direction = FORWARD then
      fn.apply(this.v1)
    else
      fn.apply(this.v2)
    end
  end inputsDo

  proc (this: BinaryConstraint) inputsHasOne(var fn: IV.TestInterface): boolean 
  begin
    if this.direction = FORWARD then
      return fn.test(this.v1)
    else
      return fn.test(this.v2)
    end      
  end inputsHasOne

  proc (this: BinaryConstraint) markUnsatisfied() 
  begin
      this.direction := INVALID
  end markUnsatisfied

  proc (this: BinaryConstraint) getOutput(): Variable 
  begin
      if this.direction = FORWARD then
          return this.v2
      else
          return this.v1
      end
  end getOutput
  
  // Calculate the walkabout strength, the stay flag, and, if it is
  // 'stay', the value for the current output of this
  // constraint. Assume this constraint is satisfied.
  proc (this: BinaryConstraint) recalculate() 
      var in_,out_: Variable
  begin
    if this.direction = FORWARD then
      in_ := this.v1; out_ := this.v2
    else
      in_ := this.v2; out_ := this.v1
    end

    out_.walkStrength := this.strength.weakest(in_.walkStrength)
    out_.stay := in_.stay
    if out_.stay then
      this.execute()
    end
  end recalculate
 
  ///////////////// EqualityConstraint //////////////////
  // I constrain two variables to have the same value: "v1 = v2".
  type
      EqualityConstraint = pointer to record(BinaryConstraint) end
     
  proc createEqualityConstraint(var1, var2: Variable; strength: Sym; planner: Planner):EqualityConstraint
      var this: EqualityConstraint
  begin
      new(this)
      this.initBinaryConstraint(var1,var2,strength, planner)
      this.addConstraint(planner)
      return this
  end createEqualityConstraint
  
  proc (this: EqualityConstraint) execute() 
  begin
    if this.direction = FORWARD then
      this.v2.value := this.v1.value
    else
      this.v1.value := this.v2.value
    end
  end execute

  ///////////////// ScaleConstraint //////////////////
    // I relate two variables by the linear scaling relationship: "v2 =
    // (v1 * scale) + offset". Either v1 or v2 may be changed to maintain
    // this relationship but the scale factor and offset are considered
    // read-only.
  type
      ScaleConstraint = pointer to record(BinaryConstraint) 
                                          scale, offset: Variable
                                      end
  proc createScaleConstraint(src,scale,offset,dest: Variable; 
                      strength: Sym; planner: Planner ): ScaleConstraint
      var this: ScaleConstraint
  begin
      new(this)
      this.initBinaryConstraint(src, dest, strength, planner)
     this.scale := scale
     this.offset := offset
     this.addConstraint(planner)
      return this
  end createScaleConstraint
  
  proc (this: ScaleConstraint) addToGraph() 
  begin
    this.v1.addConstraint(this)
    this.v2.addConstraint(this)
    this.scale.addConstraint(this)
    this.offset.addConstraint(this)
    this.direction := INVALID
  end addToGraph

  proc (this: ScaleConstraint) removeFromGraph() 
  begin
    if this.v1 # nil then this.v1.removeConstraint(this) end
    if this.v2 # nil then this.v2.removeConstraint(this) end
    if this.scale # nil then this.scale.removeConstraint(this) end
    if this.offset # nil then this.offset.removeConstraint(this) end
    this.direction := INVALID
  end removeFromGraph

  proc (this: ScaleConstraint) execute() 
  begin
    if this.direction = FORWARD then
      this.v2.value := this.v1.value * this.scale.value + this.offset.value
    else
      this.v1.value := (this.v2.value - this.offset.value) DIV this.scale.value
    end
  end execute

  proc (this: ScaleConstraint) inputsDo(var fn: IV.ForEachInterfaceRW) 
  begin
    if this.direction = FORWARD then
      fn.apply(this.v1)
      fn.apply(this.scale)
      fn.apply(this.offset)
    else
      fn.apply(this.v2)
      fn.apply(this.scale)
      fn.apply(this.offset)
    end
  end inputsDo
  
  // Calculate the walkabout strength, the stay flag, and, if it is
  // 'stay', the value for the current output of this
  // constraint. Assume this constraint is satisfied.
  proc (this: ScaleConstraint) recalculate() 
      var in_, out: Variable
  begin
    if this.direction = FORWARD then
      in_  := this.v1; out := this.v2
    else
      out := this.v1; in_  := this.v2
    end

    out.walkStrength := this.strength.weakest(in_.walkStrength)
    out.stay := in_.stay & this.scale.stay & this.offset.stay
    if out.stay then
      this.execute() // stay optimization
    end
  end recalculate

begin
    ABSOLUTE_STRONGEST := createSym(0)
    REQUIRED := createSym(1)
    STRONG_PREFERRED := createSym(2)
    PREFERRED := createSym(3)
    STRONG_DEFAULT := createSym(4)
    DEFAULT := createSym(5)
    WEAK_DEFAULT := createSym(6)
    ABSOLUTE_WEAKEST := createSym(7)
    
     strengthTable := SID.create()
    strengthTable.atPut(ABSOLUTE_STRONGEST, -10000i)
    strengthTable.atPut(REQUIRED,           -800i)
    strengthTable.atPut(STRONG_PREFERRED,   -600i)
    strengthTable.atPut(PREFERRED,          -400i)
    strengthTable.atPut(STRONG_DEFAULT,     -200i)
    strengthTable.atPut(DEFAULT,            0i)
    strengthTable.atPut(WEAK_DEFAULT,       500i)
    strengthTable.atPut(ABSOLUTE_WEAKEST,   10000i)

     strengthConstant := SSD.create()
    strengthConstant.atPut(ABSOLUTE_STRONGEST, createStrength(ABSOLUTE_STRONGEST))
    required          := createStrength(REQUIRED)
    strengthConstant.atPut(REQUIRED,           required)
    strengthConstant.atPut(STRONG_PREFERRED,   createStrength(STRONG_PREFERRED))
    strengthConstant.atPut(PREFERRED,          createStrength(PREFERRED))
    strengthConstant.atPut(STRONG_DEFAULT,     createStrength(STRONG_DEFAULT))
    strengthConstant.atPut(DEFAULT,            createStrength(DEFAULT))
    strengthConstant.atPut(WEAK_DEFAULT,       createStrength(WEAK_DEFAULT))
     absoluteWeakest   := createStrength(ABSOLUTE_WEAKEST)
    strengthConstant.atPut(ABSOLUTE_WEAKEST,   absoluteWeakest)
       
end DeltaBlue

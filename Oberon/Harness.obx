(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)

module Harness
    import Out, Run
    
    type Args* = array of array of char
    
    proc processArguments(in args : Args) : Run.Run
        var r : Run.Run
    begin
        r := Run.create(args[0])    
        if len(args) > 1 then
            // TODO atoi
            // r.setNumIterations
            if len(args) > 2 then
                // r.setInnerIterations
            end
        end
        return r
    end processArguments

    proc printUsage()
    begin
        Out.String("Harness [benchmark] [num-iterations [inner-iter]]") Out.Ln Out.Ln
        Out.String("  benchmark      - benchmark class name ") Out.Ln
        Out.String("  num-iterations - number of times to execute benchmark, "
            + "default: 1") Out.Ln
        Out.String("  inner-iter     - number of times the benchmark is "
            + "executed in an inner loop, ") Out.Ln
        Out.String("                   which is measured in total, default: 1") Out.Ln
    end printUsage
    
    proc main*( in args : Args )
        var r: Run.Run
    begin
        if len(args) < 1 then
            printUsage
            return
        end
        r := processArguments(args)
        r.runBenchmark
        r.printTotal
    end main
    
    proc run*( in what : array of char; numIterations, innerIterations: integer )
        var r : Run.Run
    begin
        r := Run.create(what)
        if r = nil then
            Out.String("ERROR could not find benchmark ")
            Out.String(what)
            Out.Ln
            return
        end
        r.setNumIterations(numIterations)
        r.setInnerIterations(innerIterations)
        r.runBenchmark
        r.printTotal
    end run

end Harness

(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)
 
module Storage

    import R := som.Random, B := Benchmark

    type 
        Storage = pointer to record (B.Benchmark)
                        count : integer
                    end
        Object = pointer to array of Object 
        
    proc create*(): Storage
        var s : Storage
    begin
        new(s)
        return s
    end create
    
    proc (this: Storage) benchmark(): B.Result
        var res : B.IntResult
            obj: Object
    begin
        R.reset
        this.count := 0
        obj := this.buildTreeDepth(7)
        new(res)
        res.res := this.count
        return res
    end benchmark    
    
    proc (this: Storage) buildTreeDepth(depth: integer): Object
        var obj: Object
            i: integer
        const fixlen = 4
    begin
    inc(this.count)
    if depth = 1 then
        new(obj, R.next() MOD 10 + 1)
    else
        new(obj,fixlen)
        for i := 0 to fixlen-1 do
            obj[i] := this.buildTreeDepth(depth-1)
        end
    end
     return obj
  end buildTreeDepth

    proc (this: Storage) verifyResult( result: B.Result ): boolean 
    begin
        return ( result(B.IntResult).res = 5461 )
    end verifyResult

end Storage

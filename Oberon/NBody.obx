(* The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 *
 * Based on nbody.java and adapted based on the SOM version.
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *)
 
module NBody
    import MathL, B := Benchmark, Out
    
    type 
        NBody = pointer to record (B.Benchmark) end

    proc create*(): NBody
        var n : NBody
    begin
        new(n)
        return n
    end create

    proc (this: NBody) benchmark(): B.Result
    begin
       assert(false) // Should never be reached
        return nil
    end benchmark
    
    proc (this: NBody) verifyResult( result: B.Result ): boolean 
    begin
        assert(false) // Should never be reached
        return false
    end verifyResult

    proc (this: NBody) innerBenchmarkLoop*(innerIterations: integer): boolean
        var system: NBodySystem
            i: integer
    begin
        system := createSystem()
        for i := 0 to innerIterations-1 do
          system.advance(0.01)
       end
      return this.verifyResult2(system.energy(), innerIterations)
    end innerBenchmarkLoop
    
    proc (this: NBody) verifyResult2(result: longreal; innerIterations: integer): boolean
	    const epsilon = 0.00000000000000005 // 5e-17
    begin
       if innerIterations = 250000 then
          return abs(result) - 0.1690859889909308 < epsilon
       end
       if innerIterations = 1 then
          return abs(result) - 0.16907495402506745 < epsilon
       end

        // Checkstyle: stop
        Out.String("No verification result for ")
        Out.Int(innerIterations,0)
        Out.String(" found") Out.Ln
        Out.String("Result is: ")
        Out.Real(short(result),0) Out.Ln
        // Checkstyle: resume
        return false;
   end verifyResult2

    
    ////////// Body ////////////
    const
        PI = 3.141592653589793
        SOLAR_MASS = 4.0 * PI * PI
        DAYS_PER_YER = 365.24
        
    type
        Body = pointer to record
                    x,y,z,vx,vy,vz,mass: longreal
                end
                
    proc createBody(x,y,z,vx,vy,vz,mass: longreal): Body
        var b: Body
    begin
        new(b)
        b.x := x
        b.y := y
        b.z := z
        b.vx := vx * DAYS_PER_YER
        b.vy := vy * DAYS_PER_YER
        b.vz := vz * DAYS_PER_YER
        b.mass := mass * SOLAR_MASS
        return b
    end createBody

   proc jupiter(): Body
    return createBody(
         4.84143144246472090e+00,
        -1.16032004402742839e+00,
        -1.03622044471123109e-01,
         1.66007664274403694e-03,
         7.69901118419740425e-03,
        -6.90460016972063023e-05,
         9.54791938424326609e-04) end

    proc saturn(): Body
    return createBody(
         8.34336671824457987e+00,
         4.12479856412430479e+00,
        -4.03523417114321381e-01,
        -2.76742510726862411e-03,
         4.99852801234917238e-03,
         2.30417297573763929e-05,
         2.85885980666130812e-04) end

    proc uranus(): Body
    return createBody(
         1.28943695621391310e+01,
        -1.51111514016986312e+01,
        -2.23307578892655734e-01,
         2.96460137564761618e-03,
         2.37847173959480950e-03,
        -2.96589568540237556e-05,
         4.36624404335156298e-05) end

    proc neptune(): Body
    return createBody(
         1.53796971148509165e+01,
        -2.59193146099879641e+01,
         1.79258772950371181e-01,
         2.68067772490389322e-03,
         1.62824170038242295e-03,
        -9.51592254519715870e-05,
         5.15138902046611451e-05) end

    proc sun(): Body
    return createBody(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0) end
    
   proc (this: Body) offsetMomentum(px, py, pz: longreal)
   begin
       this.vx := 0.0 - (px / SOLAR_MASS)
       this.vy := 0.0 - (py / SOLAR_MASS)
       this.vz := 0.0 - (pz / SOLAR_MASS)
    end offsetMomentum
    
    ////////// NBodySystem //////////
    const numberOfBodies = 5
    
    type 
        NBodySystem = pointer to record bodies: array numberOfBodies of Body end
        
    proc createSystem(): NBodySystem
        var s: NBodySystem
            i: integer
            px,py,pz: longreal
    begin
        new(s)
        
        s.bodies[0] := sun()
        s.bodies[1] := jupiter()
        s.bodies[2] := saturn()
        s.bodies[3] := uranus()
        s.bodies[4] := neptune()
        
        px := 0.0 py := 0.0 pz := 0.0
        for i := 0 to numberOfBodies-1 do
            px := px + s.bodies[i].vx * s.bodies[i].mass
            py := py + s.bodies[i].vy * s.bodies[i].mass
            pz := pz + s.bodies[i].vz * s.bodies[i].mass
        end

       s.bodies[0].offsetMomentum(px, py, pz)
        
        return s
    end createSystem
    
    proc (this: NBodySystem) advance(dt: longreal)
        var i,j: integer
            dx,dy,dz,dSquared,distance,mag: longreal
            iBody,jBody: Body
    begin
       for i := 0 to numberOfBodies-1 do
          iBody := this.bodies[i]
          for j := i + 1 to numberOfBodies-1 do
             jBody := this.bodies[j]
             dx := iBody.x - jBody.x
             dy := iBody.y - jBody.y
             dz := iBody.z - jBody.z

             dSquared := dx * dx + dy * dy + dz * dz
             distance := MathL.sqrt(dSquared)
             mag := dt / (dSquared * distance)

             iBody.vx := iBody.vx - (dx * jBody.mass * mag)
             iBody.vy := iBody.vy - (dy * jBody.mass * mag)
             iBody.vz := iBody.vz - (dz * jBody.mass * mag)

             jBody.vx := jBody.vx + (dx * iBody.mass * mag)
             jBody.vy := jBody.vy + (dy * iBody.mass * mag)
             jBody.vz := jBody.vz + (dz * iBody.mass * mag)
          end
        end

       for i := 0 to numberOfBodies-1 do
           iBody := this.bodies[i]
          iBody.x := iBody.x + dt * iBody.vx
          iBody.y := iBody.y + dt * iBody.vy
          iBody.z := iBody.z + dt * iBody.vz
       end
    end advance
    
   proc (this: NBodySystem) energy(): longreal
       var dx,dy,dz,distance,e: longreal
           iBody,jBody: Body
           i,j: integer
   begin
       e := 0.0

      for i := 0 to numberOfBodies-1 do
          iBody := this.bodies[i]
          e := e + 0.5 * iBody.mass
              * (iBody.vx * iBody.vx +
                 iBody.vy * iBody.vy +
                 iBody.vz * iBody.vz) 

          for j := i + 1 to numberOfBodies-1 do
             jBody := this.bodies[j]
             dx := iBody.x - jBody.x
             dy := iBody.y - jBody.y
             dz := iBody.z - jBody.z

            distance := MathL.sqrt( dx * dx + dy * dy + dz * dz )
            e := e - (iBody.mass * jBody.mass) / distance;
          end
       end
      return e
   end energy
  
end NBody

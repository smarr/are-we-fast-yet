(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)
 
module Sieve

    import B := Benchmark
    
    type 
        Sieve = pointer to record (B.Benchmark)
                    end

    proc create*(): Sieve
        var s : Sieve
    begin
        new(s)
        return s
    end create
    
    proc (this: Sieve) benchmark(): B.Result
        const size = 5000
        var flags: array size of boolean
            i, result: integer
            res : B.IntResult
    begin
        for i := 0 to size-1 do
            flags[i] := true
        end
        result := this.sieve(flags,size)
        new(res)
        res.res := result
        return res
    end benchmark
    
    proc (this: Sieve) sieve(var flags: array of boolean; size: integer): integer
    var primeCount, i, k: integer
    begin
        primeCount := 0
       for i := 2 to size do
          if flags[i - 1] then
            inc(primeCount)
            k := i + i
            while k <= size do
              flags[k - 1] := false
              k := k + i
            end
          end
      end
      return primeCount;
  end sieve

    proc (this: Sieve) verifyResult( result: B.Result ): boolean 
    begin
        return ( result(B.IntResult).res = 669 )
    end verifyResult

end Sieve

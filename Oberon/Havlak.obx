(*
 * Copyright (c) 2001-2016 Stefan Marr
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.*)
// Copyright 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module Havlak

    import B := Benchmark, Out
    
    type
        IntIntResult* = pointer to record (B.Result) res1, res2 : integer end
        Havlak = pointer to record (B.Benchmark) end

    proc create*(): Havlak
        var h : Havlak
    begin
        new(h)
        return h
    end create

    proc (this: Havlak) benchmark(): B.Result
    begin
       assert(false) // Should never be reached
        return nil
    end benchmark
    
    proc (this: Havlak) verifyResult( result: B.Result ): boolean 
    begin
        assert(false) // Should never be reached
        return false
    end verifyResult

    proc (this: Havlak) innerBenchmarkLoop*(innerIterations: integer): boolean
        var app: LoopTesterApp
    begin
       app := createLoopTesterApp()
        return verifyResult2(app.main(
        innerIterations, 50, 10 (* was 100 *), 10, 5), innerIterations) 
    end innerBenchmarkLoop
        
    proc verifyResult2(r: IntIntResult; innerIterations: integer): boolean
    begin
    if innerIterations = 15000 then return (r.res1 = 46602) & (r.res2 = 5213) end
    if innerIterations =  1500 then return (r.res1 =  6102) & (r.res2 = 5213) end
    if innerIterations =   150 then return (r.res1 =  2052) & (r.res2 = 5213) end
    if innerIterations =    15 then return (r.res1 =  1647) & (r.res2 = 5213) end
    if innerIterations =     1 then return (r.res1 =  1605) & (r.res2 = 5213) end
    
    // Checkstyle: stop
    Out.String("No verification result for ")
    Out.Int(innerIterations,0)
    Out.String(" found") Out.Ln
    Out.String("Result is: ")
    Out.Int(r.res1,0)
    Out.String(", ")
    Out.Int(r.res2,0) Out.Ln
    // Checkstyle: resume
    return false
   end verifyResult2
  
    //////////////// BasicBlock ////////////////
    import
        BBV := som.Vector(BasicBlock)
    type 
        BasicBlock = pointer to record
                            inEdges, outEdges: BBV.Vector
                            name: integer
                        end
                        
    proc createBasicBlock(name: integer): BasicBlock
        var b: BasicBlock
    begin
        new(b)
        b.name := name
        b.inEdges := BBV.createWithSize(2)
        b.outEdges := BBV.createWithSize(2)
        return b
    end createBasicBlock
    
    proc BasicBlockHash(in b: BasicBlock):integer
        return b.name end
        
    ////////////// BasicBlockEdge /////////////////
    type 
        BasicBlockEdge = pointer to record
                                from, too: BasicBlock
                                end
    proc createEdge(cfg: ControlFlowGraph; fromName, toName: integer): BasicBlockEdge
        var this: BasicBlockEdge
    begin
         new(this)
        this.from := cfg.createNode(fromName)
        this.too  := cfg.createNode(toName)

       this.from.outEdges.append(this.too)
       this.too.inEdges.append(this.from)

        cfg.edgeList.append(this)
        return this
    end createEdge
                    
    ////////////// ControlFlowGraph ///////////////
    import
        BEV := som.Vector(BasicBlockEdge)
    type
        ControlFlowGraph = pointer to record
                                    basicBlockMap: BBV.Vector
                                    startNode: BasicBlock
                                    edgeList: BEV.Vector
                                end
        
    proc createCFG(): ControlFlowGraph
        var cfg: ControlFlowGraph
    begin
        new(cfg)
        cfg.basicBlockMap := BBV.create()
        cfg.edgeList := BEV.create()
        return cfg
    end createCFG        
    
    proc (this: ControlFlowGraph) createNode(name: integer): BasicBlock    
        var node: BasicBlock    
    begin
        if this.basicBlockMap.at(name) # nil then
          node := this.basicBlockMap.at(name)
      else
          node := createBasicBlock(name)
          this.basicBlockMap.atPut(name, node)
      end

      if this.getNumNodes() = 1 then
          this.startNode := node
       end
      return node
    end createNode
    
    proc (this: ControlFlowGraph) getNumNodes(): integer
        return this.basicBlockMap.getSize() end

    ////////////// SimpleLoop ////////////////
    import
        ISB := som.IdentitySet(BasicBlock)
        ISL := som.IdentitySet(SimpleLoop)
    type
        SimpleLoop = pointer to record
                            basicBlocks: ISB.IdentitySet
                            children: ISL.IdentitySet
                            parent: SimpleLoop
                            isRoot: boolean
                            nestingLevel: integer
                        end
                        
    proc createSimpleLoop(bb: BasicBlock): SimpleLoop
        var this: SimpleLoop
    begin
        new(this)
        this.setNestingLevel(0)
        this.basicBlocks := ISB.create()
        this.children := ISL.create()
        if bb # nil then
              this.basicBlocks.add(bb)
        end
        return this
    end createSimpleLoop
            
    proc (this: SimpleLoop) setParent(parent: SimpleLoop)
    begin
        this.parent := parent
        this.parent.children.add(this)
    end setParent
    
    proc (this: SimpleLoop) setNestingLevel(level: integer) 
    begin
    this.nestingLevel := level
    if level = 0 then
      this.isRoot := true
    end
   end setNestingLevel
            
    ////////////// UnionFindNode ////////////
    import 
        UNV := som.Vector(UnionFindNode)
    type
        UnionFindNode = pointer to record
                                parent: UnionFindNode
                                bb: BasicBlock
                                looop: SimpleLoop
                                dfsNumber: integer
                            end
    
    proc (this: UnionFindNode) initNode(bb: BasicBlock; dfsNumber: integer )
    begin
    this.parent     := this
    this.bb         := bb
    this.dfsNumber  := dfsNumber
   end initNode
                                        
    proc (this: UnionFindNode) union(basicBlock: UnionFindNode)
    begin
        this.parent := basicBlock
    end union
            
    proc (this: UnionFindNode) findSet(): UnionFindNode
        type FI = record (UNV.ForEachInterface) parent: UnionFindNode end
        proc (var this: FI) apply(in elem: UnionFindNode) 
        begin
                elem.union(this.parent)
        end apply
        var nodeList: UNV.Vector
                node: UnionFindNode
                iter: FI
    begin
        nodeList := UNV.create()
        node := this
        while node # node.parent do
              if node.parent # node.parent.parent then
                      nodeList.append(node)
              end
              node := node.parent
        end
        iter.parent := this.parent
        nodeList.forEach(iter)
        return node
    end findSet
            
    ////////////// LoopStructureGraph ////////////////
    import 
        SLV := som.Vector(SimpleLoop)
    type
        LoopStructureGraph = pointer to record
                                        root: SimpleLoop
                                        loops: SLV.Vector
                                        loopCounter: integer
                                    end
                                                                
    proc createLoopStructureGraph(): LoopStructureGraph
        var this: LoopStructureGraph
    begin
        new(this)
        
        this.loopCounter := 0
        this.loops := SLV.create()
        this.root := createSimpleLoop(nil)
        
        this.root.setNestingLevel(0)
        inc(this.loopCounter)
        this.loops.append(this.root)
        return this
    end createLoopStructureGraph
            
    proc (this: LoopStructureGraph) createNewLoop(bb: BasicBlock): SimpleLoop
        var looop: SimpleLoop
    begin
     looop := createSimpleLoop(bb)
     inc(this.loopCounter)
     this.loops.append(looop)
     return looop
  end createNewLoop
            
    proc (this: LoopStructureGraph) calculateNestingLevel()
        type FI = record (SLV.ForEachInterface) root: SimpleLoop end
        proc (var this: FI) apply(in elem: SimpleLoop) 
        begin
            if ~elem.isRoot then
                if elem.parent = nil then
                    elem.setParent(this.root)
                end
            end
        end apply
        var liter: FI
    begin
       // link up all 1st level loops to artificial root node.
       liter.root := this.root
       this.loops.forEach(liter)

      // recursively traverse the tree and assign levels.
      this.calculateNestingLevelRec(this.root, 0)
   end calculateNestingLevel
   
   proc (this: LoopStructureGraph) calculateNestingLevelRec(looop: SimpleLoop; depth: integer)
        type FI = record (SLV.ForEachInterface)  
                        this: LoopStructureGraph looop: SimpleLoop depth: integer end
        proc (var this: FI) apply(in elem: SimpleLoop) 
        begin
            this.this.calculateNestingLevelRec(elem, this.depth + 1)

          this.looop.setNestingLevel( max(this.looop.nestingLevel,
                                    1 + elem.nestingLevel ) )
        end apply
        var liter: FI
   begin
       liter.this := this
       liter.looop := looop
       liter.depth := depth
       looop.children.forEach(liter)
   end calculateNestingLevelRec
   
   /////////////////// LoopTesterApp /////////////////////////
   type
       LoopTesterApp = pointer to record
                               cfg: ControlFlowGraph
                               lsg: LoopStructureGraph
                              end
    
    proc createLoopTesterApp(): LoopTesterApp
        var this: LoopTesterApp
            bb: BasicBlock
    begin
        new(this)
        this.cfg := createCFG()
        this.lsg := createLoopStructureGraph()
        bb := this.cfg.createNode(0)
        return this
    end createLoopTesterApp                          
                              
    proc (this: LoopTesterApp) buildDiamond(start: integer): integer
        var bb: BasicBlockEdge
    begin
       bb := createEdge(this.cfg, start, start + 1)
       bb := createEdge(this.cfg, start, start + 2)
       bb := createEdge(this.cfg, start + 1, start + 3)
       bb := createEdge(this.cfg, start + 2, start + 3)
      return start + 3;
   end buildDiamond        
   
   proc (this: LoopTesterApp) buildConnect(start, _end: integer)
       var e: BasicBlockEdge
   begin
        e := createEdge(this.cfg, start, _end)
   end buildConnect                      
                              
    proc (this: LoopTesterApp) buildStraight(start, n: integer): integer
        var i: integer
    begin
        for i := 0 to n-1 do
          this.buildConnect(start + i, start + i + 1)
      end
       return start + n
   end buildStraight                          
    
    proc (this: LoopTesterApp) buildBaseLoop(from: integer): integer
        var header, diamond1, d11, diamond2, footer: integer
    begin
        header   := this.buildStraight(from, 1)
        diamond1 := this.buildDiamond(header)
        d11      := this.buildStraight(diamond1, 1)
        diamond2 := this.buildDiamond(d11)
        footer   := this.buildStraight(diamond2, 1)
        this.buildConnect(diamond2, d11)
        this.buildConnect(diamond1, header)

        this.buildConnect(footer, from)
        footer := this.buildStraight(footer, 1)
        return footer;
   end buildBaseLoop
                    
    proc (this: LoopTesterApp) constructCFG(parLoops, pparLoops, ppparLoops: integer)
        var n, parlooptrees, i, j, top, bottom: integer
            dummy: BasicBlock
    begin
    n := 2

    for parlooptrees := 0 to parLoops-1 do
      dummy := this.cfg.createNode(n + 1)
      this.buildConnect(2, n + 1)
      inc(n)

      for i := 0 to pparLoops-1 do
        top := n
        n := this.buildStraight(n, 1)
        for j := 0 to ppparLoops-1 do
          n := this.buildBaseLoop(n)
        end
        bottom := this.buildStraight(n, 1)
        this.buildConnect(n, top)
        n := bottom
      end
      this.buildConnect(n, 1)
    end
   end constructCFG
   
   proc (this: LoopTesterApp) addDummyLoops(numDummyLoops: integer)
       var dummyloop: integer
   begin
    for dummyloop := 0 to numDummyLoops-1 do
      this.findLoops(this.lsg)
    end
   end addDummyLoops
        
      proc (this: LoopTesterApp) findLoops(loopStructure: LoopStructureGraph)
          var finder: HavlakLoopFinder
      begin
    finder := createHavlakLoopFinder(this.cfg, loopStructure)
    finder.findLoops()
   end findLoops
   
   proc (this: LoopTesterApp) constructSimpleCFG() 
       var dummy2: BasicBlockEdge
           dummy: BasicBlock
           dummy3: integer
   begin
    dummy := this.cfg.createNode(0)
    dummy3 := this.buildBaseLoop(0);
    dummy := this.cfg.createNode(1)
    dummy2 := createEdge(this.cfg, 0, 2)
   end constructSimpleCFG
   
   proc (this: LoopTesterApp) main(numDummyLoops, findLoopIterations,
      parLoops, pparLoops, ppparLoops: integer): IntIntResult
   var i: integer    
       res: IntIntResult
   begin
    this.constructSimpleCFG()
    this.addDummyLoops(numDummyLoops)
    this.constructCFG(parLoops, pparLoops, ppparLoops)

    // Performing Loop Recognition, 1 Iteration, then findLoopIteration
    this.findLoops(this.lsg)
    for i := 0 to findLoopIterations-1 do
      this.findLoops(createLoopStructureGraph())
    end

    this.lsg.calculateNestingLevel()
    new(res)
    res.res1 := this.lsg.loops.getSize()
    res.res2 := this.cfg.getNumNodes()
    return res
   end main
  
    //////////////////// HavlakLoopFinder ////////////////////
    import
        SI := som.Set(integer)
        VSI := som.Vector(SI.Set)
        VI := som.Vector(integer)
        VVI := som.Vector(VI.Vector)
        ID := som.IdentityDictionary(BasicBlock,integer)
    const 
        UNVISITED = max(integer)
        MAXNONBACKPREDS = 32 * 1024i
    type
        BasicBlockClass = (
                    BB_TOP,          // uninitialized
                    BB_NONHEADER,    // a regular BB
                    BB_REDUCIBLE,    // reducible loop
                    BB_SELF,         // single BB loop
                    BB_IRREDUCIBLE,  // irreducible loop
                    BB_DEAD,         // a dead BB
                    BB_LAST          // Sentinel
                  )
        HavlakLoopFinder = pointer to record
                                    cfg: ControlFlowGraph
                                    lsg: LoopStructureGraph
                                    nonBackPreds: VSI.Vector
                                    backPreds: VVI.Vector
                                    number: ID.IdentityDictionary
                                    maxSize: integer
                                    header,last: pointer to array of integer
                                    type_: pointer to array of BasicBlockClass
                                    nodes: pointer to array of UnionFindNode
                                end          
                              
    proc createHavlakLoopFinder(cfg: ControlFlowGraph; lsg: LoopStructureGraph): HavlakLoopFinder
        var this: HavlakLoopFinder
    begin
        new(this)
        this.cfg := cfg
        this.lsg := lsg
        this.maxSize := 0
        this.nonBackPreds := VSI.create()
        this.backPreds := VVI.create()
        this.number := ID.create(hashBasicBlock)
        return this
    end createHavlakLoopFinder        
    
    proc hashBasicBlock(in k: BasicBlock):integer
        return k.name end
            
    proc (this: HavlakLoopFinder) isAncestor(w,v: integer): boolean
         return (w <= v) & (v <= this.last[w]) end
            
    proc (this: HavlakLoopFinder) doDFS(currentNode: BasicBlock; current: integer): integer
        var lastId, i: integer
                outerBlocks: BBV.Vector
                target: BasicBlock
    begin
        this.nodes[current].initNode(currentNode, current)
        this.number.atPut(currentNode, current)

        lastId := current
        outerBlocks := currentNode.outEdges

        for i := 0 to outerBlocks.getSize()-1 do
               target := outerBlocks.at(i)
               if this.number.at(target) = UNVISITED then
                       lastId := this.doDFS(target, lastId + 1)
               end
         end
            
         this.last[current] := lastId
         return lastId
    end doDFS

    proc (this: HavlakLoopFinder) initAllNodes()
    // Step a:
    //   - initialize all nodes as unvisited.
    //   - depth-first traversal and numbering.
    //   - unreached BB's are marked as dead.
    //
        type FI = record (BBV.ForEachInterface) number: ID.IdentityDictionary end
        proc (var this: FI) apply(in elem: BasicBlock) 
        begin
            this.number.atPut(elem,UNVISITED)
        end apply
        var iter: FI
            dummy: integer
    begin
        iter.number := this.number
        this.cfg.basicBlockMap.forEach(iter)
       dummy := this.doDFS(this.cfg.startNode, 0)
   end initAllNodes

    proc (this: HavlakLoopFinder) identifyEdges(size: integer)
    // Step b:
    //   - iterate over all nodes.
    //
    //   A backedge comes from a descendant in the DFS tree, and non-backedges
    //   from non-descendants (following Tarjan).
    //
    //   - check incoming edges 'v' and add them to either
    //     - the list of backedges (backPreds) or
    //     - the list of non-backedges (nonBackPreds)
    //
    var w: integer
        nodeW: BasicBlock
   begin
    for w := 0 to size-1 do
      this.header[w] := 0;
      this.type_[w] := BB_NONHEADER

      nodeW := this.nodes[w].bb
      if nodeW = nil then
        this.type_[w] := BB_DEAD
      else
        this.processEdges(nodeW, w)
      end
    end
  end identifyEdges                      
                                          
    proc (this: HavlakLoopFinder) processEdges(nodeW: BasicBlock; w: integer)
        type FI = record (BBV.ForEachInterface) this: HavlakLoopFinder; w: integer end
        proc (var this: FI) apply(in nodeV: BasicBlock) 
            var v: integer
                tmp: SI.Set
        begin
            v := this.this.number.at(nodeV)
        if v # UNVISITED then
          if this.this.isAncestor(this.w, v) then
            this.this.backPreds.at(this.w).append(v)
          else 
            this.this.nonBackPreds.at(this.w).add(v)
          end
        end
      end apply
        var iter: FI
    begin
     iter.this := this
     iter.w := w
    if nodeW.inEdges.getSize() > 0 then
      nodeW.inEdges.forEach(iter)
    end
  end processEdges                                      
                                          
  //
  // findLoops
  //
  // Find loops and build loop forest using Havlak's algorithm, which
  // is derived from Tarjan. Variable names and step numbering has
  // been chosen to be identical to the nomenclature in Havlak's
  // paper (which, in turn, is similar to the one used by Tarjan).
  //
  proc (this: HavlakLoopFinder) findLoops()
        type FI1 = record (UNV.ForEachInterface) workList: UNV.Vector end
        proc (var this: FI1) apply(in elem: UnionFindNode) 
        begin
            this.workList.append(elem)
        end apply
      var size, i, w, nonBackSize: integer
          s: SI.Set
          v: VI.Vector
          nodePool, workList: UNV.Vector
          nodeW: BasicBlock
          niter: FI1
          x: UnionFindNode
          looop: SimpleLoop
  begin
    if this.cfg.startNode = nil then
      return
    end

    size := this.cfg.getNumNodes()

    this.nonBackPreds.removeAll()
    this.backPreds.removeAll()
    this.number.removeAll()
    if size > this.maxSize then
      new(this.header,size)
      new(this.type_,size)
      new(this.last,size)
      new(this.nodes,size)
      this.maxSize := size
    end

    for i := 0 to size-1 do
       s := SI.create()
      this.nonBackPreds.append(s)
      v := VI.create()
      this.backPreds.append(v)
      new(this.nodes[i])
    end

    this.initAllNodes()
    this.identifyEdges(size)

    // Start node is root of all other loops.
    this.header[0] := 0

    // Step c:
    //
    // The outer loop, unchanged from Tarjan. It does nothing except
    // for those nodes which are the destinations of backedges.
    // For a header node w, we chase backward from the sources of the
    // backedges adding nodes to the set P, representing the body of
    // the loop headed by w.
    //
    // By running through the nodes in reverse of the DFST preorder,
    // we ensure that inner loop headers will be processed before the
    // headers for surrounding loops.
    //
    for w := size - 1 to 0 by -1 do
      // this is 'P' in Havlak's paper
      nodePool := UNV.create()

      nodeW := this.nodes[w].bb
      if nodeW # nil then
        this.stepD(w, nodePool)

        // Copy nodePool to workList.
        //
        workList := UNV.create()
        niter.workList := workList
        nodePool.forEach(niter)

        if nodePool.getSize() # 0 then
          this.type_[w] := BB_REDUCIBLE
        end

        // work the list...
        //
        while ~workList.isEmpty() do
          x := workList.removeFirst()

          // Step e:
          //
          // Step e represents the main difference from Tarjan's method.
          // Chasing upwards from the sources of a node w's backedges. If
          // there is a node y' that is not a descendant of w, w is marked
          // the header of an irreducible loop, there is another entry
          // into this loop that avoids w.
          //

          // The algorithm has degenerated. Break and
          // return in this case.
          //
          nonBackSize := this.nonBackPreds.at(x.dfsNumber).getSize()
          if nonBackSize > MAXNONBACKPREDS then
            return
          end
          this.stepEProcessNonBackPreds(w, nodePool, workList, x)
        end

        // Collapse/Unionize nodes in a SCC to a single node
        // For every SCC found, create a loop descriptor and link it in.
        //
        if ( nodePool.getSize() > 0) or
            ( this.type_[w] = BB_SELF) then
          looop := this.lsg.createNewLoop(nodeW) // this.type_[w] # BB_IRREDUCIBLE)
          this.setLoopAttributes(w, nodePool, looop)
        end
      end
    end  // Step c
  end findLoops                                          
                              
  proc (this: HavlakLoopFinder) stepEProcessNonBackPreds(w: integer; 
      nodePool, workList: UNV.Vector; x: UnionFindNode) 
      type FI = record (SI.ForEachInterface) 
                        this: HavlakLoopFinder 
                        nodePool, workList: UNV.Vector
                        w: integer
                    end
      proc (var this: FI) apply(in elem: integer) 
          type TI = record (UNV.TestInterface) ydash: UnionFindNode end
         proc (var this: TI) test(in elem: UnionFindNode) : boolean 
             return elem = this.ydash end
          var y, ydash: UnionFindNode
              iter: TI
              tmp: SI.Set
      begin
      y := this.this.nodes[elem];
      ydash := y.findSet()

      if ~this.this.isAncestor(this.w, ydash.dfsNumber) then
        this.this.type_[this.w] := BB_IRREDUCIBLE
          this.this.nonBackPreds.at(this.w).add(ydash.dfsNumber)
      else
        if ydash.dfsNumber # this.w then
           iter.ydash := ydash
          if ~this.nodePool.hasSome(iter) then
            this.workList.append(ydash)
            this.nodePool.append(ydash)
          end
        end
      end
      end apply
      var iter: FI
  begin
      iter.this := this
      iter.nodePool := nodePool
      iter.workList := workList
      iter.w := w
    this.nonBackPreds.at(x.dfsNumber).forEach(iter)
  end stepEProcessNonBackPreds                          
                              
  proc (this: HavlakLoopFinder) setLoopAttributes(w: integer; nodePool: UNV.Vector; looop: SimpleLoop )
    // At this point, one can set attributes to the loop, such as:
    //
    // the bottom node:
    //    iter  = backPreds[w].begin();
    //    loop bottom is: nodes[iter].node);
    //
    // the number of backedges:
    //    backPreds[w].size()
    //
    // whether this loop is reducible:
    //    type[w] != BasicBlockClass.BB_IRREDUCIBLE
    //
    type FI = record(UNV.ForEachInterface) 
                    this: HavlakLoopFinder 
                    w: integer 
                    looop: SimpleLoop
                   end
     proc (var this: FI) apply(in node: UnionFindNode) 
     begin
      // Add nodes to loop descriptor.
      this.this.header[node.dfsNumber] := this.w
      node.union(this.this.nodes[this.w])

      // Nested loops are not added, but linked together.
      if node.looop # nil then
        node.looop.setParent(this.looop)
      else
        this.looop.basicBlocks.add(node.bb)
      end
     end apply
    var iter: FI
  begin
    this.nodes[w].looop := looop
    iter.this := this
    iter.w := w
    iter.looop := looop
    nodePool.forEach(iter)
  end setLoopAttributes
                                  
  proc (this: HavlakLoopFinder) stepD(w: integer; nodePool: UNV.Vector )
      type FI = record(VI.ForEachInterface) 
                       this: HavlakLoopFinder 
                    w: integer 
                    nodePool: UNV.Vector
                   end
      proc (var this: FI) apply(in v: integer) 
      begin
      if v # this.w then
        this.nodePool.append(this.this.nodes[v].findSet())
      else
        this.this.type_[this.w] := BB_SELF
      end
      end apply
      var iter: FI
  begin
      iter.this := this
      iter.w := w
      iter.nodePool := nodePool
     this.backPreds.at(w).forEach(iter)
  end stepD                                                
  
end Havlak

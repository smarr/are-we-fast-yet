(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)
 
module Bounce

    import R := som.Random, B := Benchmark
    
    type 
        Bounce = pointer to record (B.Benchmark)
                        end
        Ball = pointer to record
                    x y xVel yVel : integer
                end
                
    proc createBall(): Ball
        var b : Ball
    begin
        new(b)
        b.x := R.next() MOD 500
        b.y := R.next() MOD 500
        b.xVel := (R.next() MOD 300) - 150
        b.yVel := (R.next() MOD 300) - 150
        return b
    end createBall
    
    proc (this: Ball) bounce(): boolean
        var
            xLimit yLimit: integer
            bounced : boolean
    begin
        xLimit := 500
        yLimit := 500
        bounced := false
        this.x := this.x + this.xVel
        this.y := this.y + this.yVel
        if this.x > xLimit then
            this.x := xLimit; this.xVel := -abs(this.xVel); bounced := true
        end
        if this.x < 0 then
            this.x := 0; this.xVel := abs(this.xVel); bounced := true
        end
        if this.y > yLimit then
            this.y := yLimit; this.yVel := -abs(this.yVel); bounced := true
        end
        if this.y < 0 then
            this.y := 0; this.yVel := abs(this.yVel); bounced := true
        end
        return bounced
    end bounce
    
    proc create*(): Bounce
        var b : Bounce
    begin
        new(b)
        return b
    end create

    proc (this: Bounce) benchmark(): B.Result
        const ballCount = 100
        var res : B.IntResult 
            bounces i j : integer
            balls : array ballCount of Ball
    begin
        R.reset()
        bounces := 0
        for i := 0 to ballCount - 1 do
            balls[i] := createBall()
        end
        for i := 0 to 50 - 1 do
            for j := 0 to ballCount - 1 do
                if balls[j].bounce() then
                    inc(bounces)
                end
            end
        end
        new(res)
        res.res := bounces
        return res
    end benchmark

    proc (this: Bounce) verifyResult( result: B.Result ): boolean 
    begin
        return ( result(B.IntResult).res = 1331 )
    end verifyResult
    
end Bounce

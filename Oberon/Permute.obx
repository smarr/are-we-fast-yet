(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)
 
module Permute

    import B := Benchmark
    
    type 
        Permute = pointer to record (B.Benchmark)
                            count : integer
                            v : pointer to array of integer
                        end

    proc create*(): Permute
        var p : Permute
    begin
        new(p)
        return p
    end create
    
    proc (this: Permute) benchmark(): B.Result
        var res : B.IntResult 
    begin
        this.count := 0
        new(this.v,6)
        this.permute(6)
        new(res)
        res.res := this.count
        return res
    end benchmark
    
    proc (this: Permute) permute(n: integer)
        var n1, i : integer
    begin
        inc(this.count)
       if n # 0 then
          n1 := n - 1
           this.permute(n1)
           i := n1
           while i >= 0 do
              this.swap(n1, i) // 150-550 us
              //swap(this.v[n1],this.v[i]) // 200-1900us, much slower
              this.permute(n1)
              this.swap(n1, i)
              //swap(this.v[n1],this.v[i])
               dec(i)
            end
      end
   end permute

    proc (this: Permute) swap( i,j: integer)
        var tmp : integer
    begin
        tmp := this.v[i]
        this.v[i] := this.v[j]
        this.v[j] := tmp
    end swap
    
    proc swap( var i,j: integer)
        var tmp : integer
    begin
        tmp := i
        i := j
        j := tmp
    end swap
        
    proc (this: Permute) verifyResult( result: B.Result ): boolean 
    begin
        return ( result(B.IntResult).res = 8660 )
    end verifyResult
    
end Permute

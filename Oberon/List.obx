(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2021 Rochus Keller <me@rochus-keller.ch> (for Oberon+ migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)
 
module List

    import B := Benchmark
    
    type
        List = pointer to record (B.Benchmark)
                        end

        Element = pointer to record
                        val : integer
                        next : Element
                    end
                    
    proc (this: Element) length(): integer
    begin
        if this.next = nil then
            return 1
        else
            return 1 + this.next.length()
        end
    end length
    
    proc (this: List) makeList(length: integer): Element
        var e: Element
    begin
        if length = 0 then
            return nil
        else 
            e := createElem(length)
            e.next := this.makeList(length-1)
            return e
        end
    end makeList
    
    proc (this: List) isShorterThan( x y : Element ): boolean
        var xTail yTail : Element
    begin
        xTail := x
        yTail := y
        while yTail # nil do
            if xTail = nil then
                return true
            end
            xTail := xTail.next
            yTail := yTail.next
        end
        return false
    end isShorterThan
    
    proc (this: List) tail( x y z : Element ): Element
    begin
        if this.isShorterThan(y,x) then
            return this.tail( this.tail( x.next, y, z),
             this.tail( y.next, z, x),
             this.tail( z.next, x, y) )
        else
            return z
        end
    end tail
    
    proc createElem(val: integer): Element
        var e: Element
    begin
        new(e)
        e.val := val
        return e
    end createElem
                
    proc create*(): List
        var b : List
    begin
        new(b)
        return b
    end create
    
    proc (this: List) benchmark(): B.Result
        var result: Element
            res : B.IntResult
    begin
       result := this.tail(this.makeList(15), this.makeList(10), this.makeList(6))
        new(res)
        res.res := result.length()
        return res
    end benchmark

    proc (this: List) verifyResult( result: B.Result ): boolean 
    begin
        return ( result(B.IntResult).res = 10 )
    end verifyResult

end List
